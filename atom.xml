<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GOLOG]]></title>
  <link href="http://golog.cc/atom.xml" rel="self"/>
  <link href="http://golog.cc/"/>
  <updated>2016-07-22T02:07:15+08:00</updated>
  <id>http://golog.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[一台机器上设置多个SSH Key]]></title>
    <link href="http://golog.cc/14691212152076.html"/>
    <updated>2016-07-22T01:13:35+08:00</updated>
    <id>http://golog.cc/14691212152076.html</id>
    <content type="html"><![CDATA[
<p><strong>1. 生成 ssh keys</strong></p>

<p>终端下输入命令：</p>

<pre><code>
ssh-keygen -t rsa -C &quot;youname@example.com&quot;

</code></pre>

<p>这时可以一路回车，不输入任何字符，将会在~/.ssh下自动生成id_rsa和id_rsa.pub文件。</p>

<p>注意：双引号换成自己的邮箱，如果linux下遇到权限问题，只需在前面加上sudo</p>

<p><strong>2. github添加SSH keys</strong></p>

<p>将id_rsa.pub里面的内容复制下来，在github上的settings里面找到add keys，将其粘贴到key即可，title唯一即可随便填，建议写有意义的;</p>

<p><strong>3. 测试</strong></p>

<p>在控制台上测试一下，输入：</p>

<pre><code>
ssh -T git@github.com

</code></pre>

<p>只要看到最后一行:</p>

<pre><code>
Hi chenlianjiang! You&#39;ve successfully authenticated, but GitHub does not provide shell access

</code></pre>

<p>说明验证成功了.</p>

<p><strong>4. gitlib帐号添加SSH keys</strong></p>

<p>同第（1）步一样，生成新的SSH Keys</p>

<p>这时候在生成ssh key时候要注意了这时一路回车，不输入任何字符在绑定gitlibng的ssh key时，会发现将github的ssh key覆盖了。需要做调整：</p>

<p>打开终端，终端下输入命令：</p>

<pre><code>
ssh-keygen -t rsa -C &quot;youname@example.com&quot;

</code></pre>

<p>这时，给这个文件起一个名字， 比如叫C:\Users\Administrator.ssh\ id_rsa_gitlib, 所以相应的也会生成一个 id_rsa_gitlib.pub 文件。</p>

<p>注意这里如果只输入文件名会在终端的当前目录下生成，拷贝到对应位置即可；</p>

<p>终端输入一下命令：</p>

<pre><code>
$ ssh-add ~/.ssh/id_rsa

$ ssh-add ~/.ssh/id_rsa_gitlib

</code></pre>

<p>ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中。该命令位置在/usr/bin/ssh-add</p>

<p>如果出现Could not open a connection to your authentication agent.错误提示先执行$ ssh-agent.exe bash，然后执行上面命令；</p>

<pre><code>
-D：删除ssh-agent中的所有密钥

-d：从ssh-agent中的删除密钥

-e pkcs11：删除PKCS#11共享库pkcs1提供的钥匙

-s pkcs11：添加PKCS#11共享库pkcs1提供的钥匙

-L：显示ssh-agent中的公钥

-l：显示ssh-agent中的密钥

-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥

-X：对ssh-agent进行解锁

-x：对ssh-agent进行加锁

</code></pre>

<p>在~/.ssh/目录下新建config文件，并添加:</p>

<pre><code>
# github
Host github.com
      HostName github.com
      PreferredAuthentications publickey
      IdentityFile ~/.ssh/id_rsa
      
# gitlib
Host gitlib.com
      HostName gitlib.com
      PreferredAuthentications publickey
      IdentityFile ~/.ssh/id_rsa_gitlib

</code></pre>

<p>将id_rsa_gitlib.pub里面的内容复制下来，在gitlib上的账户里面找到所示SSH keys，将其粘贴到key内容即可，Title唯一即可随便填，，点击添加需要输入登录密码；</p>

<p><strong>5. 测试</strong></p>

<p>在控制台上测试一下，输入：</p>

<pre><code>
ssh -T git@域名

</code></pre>

<p>只要看到最后一行<code>Welcome to GitLab, chenlj!</code>，说明验证成功了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关Golang的又一个小站点]]></title>
    <link href="http://golog.cc/14691163813356.html"/>
    <updated>2016-07-21T23:53:01+08:00</updated>
    <id>http://golog.cc/14691163813356.html</id>
    <content type="html"><![CDATA[
<p>从Golang还是零点几的版本时，就开始使用。对于Golang的感情很深，虽然我的Golang的变成技术不怎么样，也没有拿它写过什么大的项目。这没有关系，不妨碍我对它的喜爱。</p>

<p>大大小小的写了一些项目，在各种项目中查找资料、自己研究，积累一些Golang的技巧和代码片段。在这个小站里，把这些分享出来，与所有的Golanger一块交流。</p>

<p>这是这个小站的第一篇文章。整个小站采用的是静态网站，原本想用go语言的hugo，不过考虑到域名问题、空间问题等，还是在自己电脑上生成静态网站，而后再上传到静态网站托管的服务器上。</p>

<p>就是这个小站。欢迎大家留言，欢迎大家来多交流。</p>

]]></content>
  </entry>
  
</feed>
