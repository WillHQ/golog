<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GOLOG]]></title>
  <link href="http://golog.cc/atom.xml" rel="self"/>
  <link href="http://golog.cc/"/>
  <updated>2017-06-18T15:22:24+08:00</updated>
  <id>http://golog.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[GO语言重量级WEB框架BEEGO]]></title>
    <link href="http://golog.cc/beego-web-framework-of-golang.html"/>
    <updated>2017-06-16T23:09:29+08:00</updated>
    <id>http://golog.cc/beego-web-framework-of-golang.html</id>
    <content type="html"><![CDATA[
<p>BEEGO作为GO语言的重量级框架，被很多人用在了各自的项目当中。可以在Beego的官方网站（<a href="http://beego.me">Beego</a>）上查看应用案例，不少是大型的企业，以及大型的项目。</p>

<span id="more"></span><!-- more -->

<p>从这篇开始，在使用Beego这个框架做项目的时候，陆续的记录一些笔记，供大家（也包括自己）参考使用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下执行git命令出现xcrun： error： invalid active developer path错误的处理方法]]></title>
    <link href="http://golog.cc/mac-xcrun-error-fixed.html"/>
    <updated>2017-06-16T22:48:46+08:00</updated>
    <id>http://golog.cc/mac-xcrun-error-fixed.html</id>
    <content type="html"><![CDATA[
<p>在Mac下，执行git命令时候出现如下的错误：</p>

<pre><code>
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun

</code></pre>

<span id="more"></span><!-- more -->

<p>解决方法：</p>

<p>打开终端输入</p>

<p>xcode-select --install</p>

<p>回车后，系统弹出下载xcode，点击确认，下载完成后即可。</p>

<p>猜测可能是跟xcode卸载或者升级有些关系，一些插件或组件被破坏了，重新安装下就好。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Git的钩子实现自动部署]]></title>
    <link href="http://golog.cc/auto-deploy-with-git-hook.html"/>
    <updated>2016-10-08T16:04:47+08:00</updated>
    <id>http://golog.cc/auto-deploy-with-git-hook.html</id>
    <content type="html"><![CDATA[
<ol>
<li>通过服务器系统自带git或者其他的方式，例如gogs，搭建git仓库。这里要注意，搭建git仓库时，要创建一个git用户。对于客户端而言，服务器是远端；对于服务器本机而言，就是本机。</li>
</ol>

<span id="more"></span><!-- more -->

<ol>
<li><p>在git仓库里，创建一个仓库，用于客户端上传文件使用。通过类似gitlab或者gogs之类工具，这里创建的仓库是在指定的位置。</p>

<p>这一步的操作是在服务器上，记住路径，例如/var/git/testRep。</p></li>
<li><p>进入服务器上的部署文件夹，假如是/var/testDeploy,</p>

<p>在该目录下，运行：</p>

<pre><code>
git clone /var/git/testRep /var/testDeploy

</code></pre>

<p>相当于初始化本地一个库，后续就可以通过git pull来更新文件了</p>

<blockquote>
<p>注意：删除已有的文件夹中的文件、删除.git文件夹之后，要切换到git用户之下，使用git用户重新git clone一遍，才可以自动的进行部署，因为部署需要用git用户进行操作，在root做所有的操作，git就没办法把更新的文件部署到发布的目录下面。</p>
</blockquote></li>
<li><p>在服务器上的仓库/var/git/testRep.git/下面，找到hook文件夹，找到其中的post-receive文件，这个是响应在post的钩子文件，运行这个文件定义的脚本，对这个文件脚本进行编写：</p>

<pre><code>
unset GIT_DIR
DeployDir=/var/testDeploy/
cd $DeployDir
git add . -A &amp;&amp; git stash
git pull origin master

</code></pre>

<p>实现把文件pull部署文件夹，从而实现自动部署。</p>

<p>以上方法步骤，验证通过。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下切换用户的命令]]></title>
    <link href="http://golog.cc/change-user-os.html"/>
    <updated>2016-10-08T00:07:00+08:00</updated>
    <id>http://golog.cc/change-user-os.html</id>
    <content type="html"><![CDATA[
<ol>
<li>增加用户，在root下：</li>
</ol>

<pre><code>
add user git

</code></pre>

<p>表示增加git用户。</p>

<ol>
<li>切换用户</li>
</ol>

<pre><code>
su git

</code></pre>

<p>切换成git用户。</p>

<p>从root用户切换到其他用户不需要密码，从其他用户切换到root用户，需要输入密码。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何升级CentOS 6.5下的MySQL]]></title>
    <link href="http://golog.cc/how-to-update-mysql-in-centos.html"/>
    <updated>2016-10-07T22:05:57+08:00</updated>
    <id>http://golog.cc/how-to-update-mysql-in-centos.html</id>
    <content type="html"><![CDATA[
<ul>
<li>1. 备份数据库，升级MySQL通常不会丢失数据，但保险起见，我们需要做这一步。输入命令：</li>
</ul>

<pre><code>
mysqldump -u xxx -h xxx -P 3306 -p --all-databases &gt; databases.sql

</code></pre>

<span id="more"></span><!-- more -->

<ul>
<li>2. 停止MySQL服务，输入命令：</li>
</ul>

<pre><code>
service mysqld stop

</code></pre>

<ul>
<li>3. 卸载旧版MySQL，输入命令：</li>
</ul>

<pre><code>
yum remove mysql mysql-*

</code></pre>

<ul>
<li>4. 移除命令执行后，可再看看是否有残余的mysql，输入命令：</li>
</ul>

<pre><code>
yum list installed | grep mysql

</code></pre>

<p>如果有，可输入命令删除：</p>

<pre><code>
rum remove mysql－libs

</code></pre>

<ul>
<li>5. 下载安装最新的rpm文件</li>
</ul>

<pre><code>
rpm -Uvh http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm

</code></pre>

<ul>
<li>6. 安装MySQL，输入命令：</li>
</ul>

<pre><code>
yum install mysql-community-server

</code></pre>

<ul>
<li>7. 安装完成后，输入命令查看MySQL版本号：</li>
</ul>

<pre><code>
mysql -V

</code></pre>

<ul>
<li>8. 启动MySQL，输入命令：</li>
</ul>

<pre><code>
service mysqld start

</code></pre>

<p>在经过上面的方法升级之后，Mysql启动时，可能会报错，复发启动，查看/var/log/mysqld.log发现：</p>

<pre><code>
[ERROR] InnoDB: auto-extending data file ./ibdata1 is of a different size 640 pages (rounded down to MB) than specified in the .cnf file: initial 768 pages, max 0 (relevant if non-zero) pages!

</code></pre>

<p>可以采用下面的方法来处理：</p>

<pre><code>
rm -rf /var/lib/mysql/ib*

</code></pre>

<p>删除ibdata1、ib_logfile0、ib_logfile1等文件，再重启Mysql即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS下Mysql无法启动，提示“Another MySQL daemon already running”]]></title>
    <link href="http://golog.cc/centos-Another-MySQL-daemon-already-running.html"/>
    <updated>2016-10-07T21:04:41+08:00</updated>
    <id>http://golog.cc/centos-Another-MySQL-daemon-already-running.html</id>
    <content type="html"><![CDATA[
<p>有些情况下，CentOS下的Mysql启动不了，采用:</p>

<pre><code>
service mysqld restart

service mysqld start

</code></pre>

<p>都解决不了，会提示：</p>

<pre><code>
Another MySQL daemon already running with the same unix socket.

</code></pre>

<span id="more"></span><!-- more -->

<p>目前，具体造成该问题的原因，暂且不知，但可以采取以下的方法，解决这个问题：</p>

<ol>
<li><p>重启服务器</p></li>
<li><p>采用如下的命令：</p></li>
</ol>

<pre><code>
# mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak

# service mysqld start

</code></pre>

<p>相当于删除mysql.sock，重新启动mysql服务，重新生成一个有效的mysql.sock，问题就可以解决。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThinkGo类ThinkPHP的Go语言WEB开发框架]]></title>
    <link href="http://golog.cc/thinkgo-web-frame-project.html"/>
    <updated>2016-10-07T19:02:19+08:00</updated>
    <id>http://golog.cc/thinkgo-web-frame-project.html</id>
    <content type="html"><![CDATA[
<p>ThinkGo 是一款 Go 语言编写的 web 快速开发框架。</p>

<p>它基于开源框架 Gin 进行二次开发，旨在实现一种类 ThinkPHP 的高可用、高效率的 web 框架。</p>

<p>它最显著的特点是模块、控制器、操作三段式的标准 MVC 架构，且模块与插件的目录结构完全一致，令开发变得非常简单灵活。</p>

<span id="more"></span><!-- more -->

<p>该项目Github链接：<a href="https://github.com/henrylee2cn/thinkgo">https://github.com/henrylee2cn/thinkgo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack 的开源替代品 Mattermost]]></title>
    <link href="http://golog.cc/mattermost-go-project.html"/>
    <updated>2016-10-07T18:27:08+08:00</updated>
    <id>http://golog.cc/mattermost-go-project.html</id>
    <content type="html"><![CDATA[
<p>Mattermost 是一个 Slack 的开源替代品。Mattermost 采用 Go 语言开发，这是一个开源的团队通讯服务。为团队带来跨 PC 和移动设备的消息、文件分享，提供归档和搜索功能。</p>

<p>Slack 是聊天群组 + 大规模工具集成 + 文件整合 + 统一搜索。截至2014年底，Slack 已经整合了电子邮件、短信、Google Drives、Twitter、Trello、Asana、GitHub 等 65 种工具和服务，把可以把各种碎片化的企业沟通和协作集中到一起。</p>

<span id="more"></span><!-- more -->

<p><img src="media/14758360281130/14758360579753.png" alt=""/></p>

<p><img src="media/14758360281130/14758360724395.png" alt=""/></p>

<p><img src="media/14758360281130/14758360833394.gif" alt=""/></p>

<p>项目Github链接：<a href="http://github.com/mattermost/platform">http://github.com/mattermost/platform</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单 golang 日志 Golog]]></title>
    <link href="http://golog.cc/golog-log-project.html"/>
    <updated>2016-10-07T18:15:02+08:00</updated>
    <id>http://golog.cc/golog-log-project.html</id>
    <content type="html"><![CDATA[
<p>Golog 是简单的golang日志，基于golang内置log封装.</p>

<p>特征</p>

<ol>
<li><p>实现各种日志 level: DEBUG, INFO, WARN, ERROR</p></li>
<li><p>实现各种日志 handlers: ConsoleHander, FileHandler, RotatingHandler</p></li>
</ol>

<span id="more"></span><!-- more -->

<p>代码实例</p>

<pre><code>// rotating hander, max log files is 4, max file size is 4M
rotatingHandler := logger.NewRotatingHandler(&quot;./&quot;, &quot;test.log&quot;, 4, 4*1024*1024)

// logger set handlers: console, rotating
logger.SetHandlers(logger.Console, rotatingHandler)

defer logger.Close()

// logger set flags
logger.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)

// logger set log level
logger.SetLevel(logger.INFO)

logger.Debug(&quot;something&quot;, &quot;debug&quot;)
logger.Info(&quot;something&quot;)
logger.Warn(&quot;something&quot;)
logger.Error(&quot;something&quot;)
</code></pre>

<p>项目Github链接：<a href="https://github.com/jander/golog">https://github.com/jander/golog</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go 编写的内容管理系统 Fragmenta CMS]]></title>
    <link href="http://golog.cc/fragmenta-cms-project.html"/>
    <updated>2016-10-07T18:04:12+08:00</updated>
    <id>http://golog.cc/fragmenta-cms-project.html</id>
    <content type="html"><![CDATA[
<p>Fragmenta CMS 是一个用户友好的内容管理系统，用 Go 编写。</p>

<p>Fragmenta CMS 可以让你快速建立网站，它包办了创建网站的一般性的繁琐工作，包括：用户登录，网页，博客文章等，让你专注于你 app 自身的特点，你可以:</p>

<span id="more"></span><!-- more -->

<ul>
<li><p>简单部署 —— 你只需要一个数据库和fragment —— 与内置的Web服务器本地进行测试</p></li>
<li><p>使用与你网站相同的风格进行Rich editing</p></li>
<li><p>免费且开源 (MIT) ——下载二进制文件或自己编译</p></li>
</ul>

<p>项目的Github链接：<a href="http://github.com/fragmenta/fragmenta-cms">http://github.com/fragmenta/fragmenta-cms</a></p>

<p>项目的主页链接：<a href="http://fragmenta.eu/">http://fragmenta.eu/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go build时的错误分析]]></title>
    <link href="http://golog.cc/error-of-go-build.html"/>
    <updated>2016-07-22T18:38:27+08:00</updated>
    <id>http://golog.cc/error-of-go-build.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">go build 错误一</h2>

<p>如果出现：</p>

<pre><code>
warning: building out-of-date packages:

runtime/pprof

testing

regexp/syntax

regexp

installing these packages with &#39;go test -i&#39; will speed future tests.

</code></pre>

<span id="more"></span><!-- more -->

<p>那么就是说明下面的包已经有修改过了，但是没有重新install<br/>
如果有标准的包过期，使用<code>go install -a -v std</code>来进行更新。</p>

<p>如果是自定义的包过期，重新调用<code>go instal</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go中获取各种路径]]></title>
    <link href="http://golog.cc/get-path-with-golang.html"/>
    <updated>2016-07-22T18:45:18+08:00</updated>
    <id>http://golog.cc/get-path-with-golang.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>执行用户当前所在路径：</p>

<pre><code>
os.Getwd()

</code></pre></li>
<li><p>执行程序所在路径：</p>

<p>执行程序文件相对路径：</p>

<pre><code>
file, _ := exec.LookPath(os.Args[0])

</code></pre>

<span id="more"></span><!-- more -->

<p>执行程序所在的绝对路径：</p>

<p>（使用下面一套方法）</p>

<pre><code>
file, _ := exec.LookPath(os.Args[0])
log.Println(&quot;file:&quot;, file)
dir,_ := path.Split(file)
log.Println(&quot;dir:&quot;, dir)
os.Chdir(dir)
wd, _ := os.Getwd()
log.Println(&quot;wd:&quot;, wd)

</code></pre>

<p>比如这个程序</p>

<pre><code>package main
import(
    &quot;os&quot;
    &quot;log&quot;
    &quot;os/exec&quot;
    &quot;path&quot;
)
func main() {
    file, _ := os.Getwd()
    log.Println(&quot;current path:&quot;, file)
    file, _ = exec.LookPath(os.Args[0])
    log.Println(&quot;exec path:&quot;, file)
    dir,_ := path.Split(file)
    log.Println(&quot;exec folder relative path:&quot;, dir)
    os.Chdir(dir)
    wd, _ := os.Getwd()
    log.Println(&quot;exec folder absolute path:&quot;, wd)
}

</code></pre>

<p>可执行文件我放在<code>/home/houqun/handcode/test</code><br/>
我执行的路径是<code>/home/houqun/</code></p>

<p>返回结果：</p>

<pre><code>[houqun@HouTekiMacbook ~]$ handcode/test
2013/02/06 11:09:07 current path: /home/houqun
2013/02/06 11:09:07 exec path: handcode/test
2013/02/06 11:09:07 exec folder relative path: handcode/
2013/02/06 11:09:07 exec folder absolute path: /home/houqun/handcode
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[操作系统相关操作]]></title>
    <link href="http://golog.cc/operation-of-os.html"/>
    <updated>2016-07-22T18:43:07+08:00</updated>
    <id>http://golog.cc/operation-of-os.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>linux下获取进程信息是使用/proc/pid/</p></li>
<li><p>判断当前用户是否是root用户</p>

<pre><code>
os.Geteuid() != 0

</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path包]]></title>
    <link href="http://golog.cc/path-package.html"/>
    <updated>2016-07-22T18:32:21+08:00</updated>
    <id>http://golog.cc/path-package.html</id>
    <content type="html"><![CDATA[
<p>path.clean用于对路径../../等进行过滤，在创建、修改文件的时候需要使用，否则会有漏洞</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go time package 时间包]]></title>
    <link href="http://golog.cc/time-package-of-golang.html"/>
    <updated>2016-07-22T18:54:24+08:00</updated>
    <id>http://golog.cc/time-package-of-golang.html</id>
    <content type="html"><![CDATA[
<p>go 的time package 提供了time.Format函数，用来对时间进行格式化输出。</p>

<p>类似的还有time.Parse用来解析字符串类型的时间到time.Time。这是两个互逆的函数。</p>

<span id="more"></span><!-- more -->

<p>问题是，go采用的格式化layout 和我们以往所用的任何经验都不同。以至于初次接触总是一头雾水。</p>

<p>其实go提供的这个layout对算法的实现非常科学高效，而且很规律。下面我们详细分解下。</p>

<p><strong>直接上个对应表：</strong></p>

<p>前面是含义，后面是 go 的表示值,多种表示,逗号&quot;,&quot;分割：</p>

<ul>
<li>月份 1,01,Jan,January</li>
<li>日　 2,02,_2</li>
<li>时　 3,03,15,PM,pm,AM,am</li>
<li>分　 4,04</li>
<li>秒　 5,05</li>
<li>年　 06,2006</li>
<li>时区 -07,-0700,Z0700,Z07:00,-07:00,MST</li>
<li>周几 Mon,Monday</li>
</ul>

<p>您看出规律了么！哦是的，你发现了，这里面没有一个是重复的，所有的值表示都唯一对应一个时间部分。并且涵盖了很多格式组合。</p>

<!-- more -->

<p><strong>比如小时的表示(原定义是下午3时，也就是15时)</strong></p>

<ul>
<li>3 用12小时制表示，去掉前导0</li>
<li>03 用12小时制表示，保留前导0</li>
<li>15 用24小时制表示，保留前导0</li>
<li>03pm 用24小时制am/pm表示上下午表示，保留前导0</li>
<li>3pm 用24小时制am/pm表示上下午表示，去掉前导0
又比如月份</li>
<li>1 数字表示月份，去掉前导0</li>
<li>01 数字表示月份，保留前导0</li>
<li>Jan 缩写单词表示月份</li>
<li>January 全单词表示月份</li>
</ul>

<p><strong>实例对应</strong></p>

<p>真实时间：我的UTC时间是 2013年12月5日，我的本地时区是Asia </p>

<p>字符表示：　　2013 12 5 Asia</p>

<p>Go Layout：　2006 01 2 MST</p>

<p>真实时间：我的UTC时间是 2013年12月22点，我的本地时区是Asia</p>

<p>字符表示：　　2013 12 22 Asia</p>

<p>Go Layout：　2006 01 15 MST</p>

<p>是滴，上面这个时间是合法的，虽然没有说是那一天，但是说了小时。而所有这些数字的顺序正好是1,2,4,5,6,7和一个时区MST。</p>

<p>其实还有一个秒的 repeated digits for fractional seconds 表示法，用的是 0和9 ,很少用，源代码里面是这样写的</p>

<pre><code>1. stdFracSecond0                          // &quot;.0&quot;, &quot;.00&quot;, ... , trailing zeros included
2. stdFracSecond9                          // &quot;.9&quot;, &quot;.99&quot;, ..., trailing zeros omitted
</code></pre>

<p><strong>那些分界符</strong></p>

<p>除了那些值之外的都是分界符号，自然匹配了，直接举例子吧</p>

<p>字符表示：　　2013-12 21 Asia</p>

<p>Go Layout：　2006-01 15 MST</p>

<p>字符表示：　　2013年12月21时 时区Asia</p>

<p>Go Layout：　2006年01月15时 时区MST</p>

<p>好了，您是否感觉这个表示方法兼容度更好，适应性更强呢，更容易记忆呢。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go 类型转换]]></title>
    <link href="http://golog.cc/change-type-of-data.html"/>
    <updated>2016-07-22T18:51:23+08:00</updated>
    <id>http://golog.cc/change-type-of-data.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>整型到字符串</p>

<pre><code>s = strconv.Itoa(i) 

s = strconv.FormatInt(int64(i), 10)
</code></pre></li>
<li><p>字符串到整型</p>

<pre><code>i, err = strconv.Atoi(s)

i, err = ParseInt(s, 10, 0) 
</code></pre>

<span id="more"></span><!-- more --></li>
<li><p>字符串到float（32/64）</p>

<pre><code>f, err = ParseFloat(s, 32) `
</code></pre></li>
<li><p>整型到float或者float到整型</p>

<pre><code>float(i)

int(f)
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[import的使用]]></title>
    <link href="http://golog.cc/usage-of-import.html"/>
    <updated>2016-07-22T18:37:36+08:00</updated>
    <id>http://golog.cc/usage-of-import.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>import包命名</p>

<p>import l4g &quot;code.google.com/p/log4go&quot;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages 静态网站托管]]></title>
    <link href="http://golog.cc/github-pages-and-static-website.html"/>
    <updated>2016-07-22T14:18:27+08:00</updated>
    <id>http://golog.cc/github-pages-and-static-website.html</id>
    <content type="html"><![CDATA[
<p>本网站就是采用Github pages托管的静态网站。</p>

<p>静态网站的生成，有各种方法。本网站是采用了Mac下的一个Markdown的工具，可以直接把一个目录下面的所有的MD文件生成静态网站，我就采用这种方式了，没有使用其他的例如hexo、hugo之类的工具。</p>

<span id="more"></span><!-- more -->

<p>下面简要的说一下：</p>

<ol>
<li><p>如何把网站托管到Github Pages上面</p></li>
<li><p>如何在Github Pages上面绑定域名</p></li>
<li><p>如何进行静态网站的托管同步</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一台机器上设置多个SSH Key]]></title>
    <link href="http://golog.cc/set-many-ssh-keys-in-a-computer.html"/>
    <updated>2016-07-22T01:13:35+08:00</updated>
    <id>http://golog.cc/set-many-ssh-keys-in-a-computer.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>先声明，这篇里提到的方法，我并没有测试成功，我的环境是Mac。</p>
</blockquote>

<p><strong>1. 生成 ssh keys</strong></p>

<p>终端下输入命令：</p>

<pre><code>
ssh-keygen -t rsa -C &quot;youname@example.com&quot;

</code></pre>

<p>这时可以一路回车，不输入任何字符，将会在~/.ssh下自动生成id_rsa和id_rsa.pub文件。</p>

<span id="more"></span><!-- more -->

<p>注意：双引号换成自己的邮箱，如果linux下遇到权限问题，只需在前面加上sudo</p>

<p><strong>2. github添加SSH keys</strong></p>

<p>将id_rsa.pub里面的内容复制下来，在github上的settings里面找到add keys，将其粘贴到key即可，title唯一即可随便填，建议写有意义的;</p>

<p><strong>3. 测试</strong></p>

<p>在控制台上测试一下，输入：</p>

<pre><code>
ssh -T git@github.com

</code></pre>

<p>只要看到最后一行:</p>

<pre><code>
Hi chenlianjiang! You&#39;ve successfully authenticated, but GitHub does not provide shell access

</code></pre>

<p>说明验证成功了.</p>

<p><strong>4. gitlib帐号添加SSH keys</strong></p>

<p>同第（1）步一样，生成新的SSH Keys</p>

<p>这时候在生成ssh key时候要注意了这时一路回车，不输入任何字符在绑定gitlibng的ssh key时，会发现将github的ssh key覆盖了。需要做调整：</p>

<p>打开终端，终端下输入命令：</p>

<pre><code>
ssh-keygen -t rsa -C &quot;youname@example.com&quot;

</code></pre>

<p>这时，给这个文件起一个名字， 比如叫C:\Users\Administrator.ssh\ id_rsa_gitlib, 所以相应的也会生成一个 id_rsa_gitlib.pub 文件。</p>

<p>注意这里如果只输入文件名会在终端的当前目录下生成，拷贝到对应位置即可；</p>

<p>终端输入一下命令：</p>

<pre><code>
$ ssh-add ~/.ssh/id_rsa

$ ssh-add ~/.ssh/id_rsa_gitlib

</code></pre>

<p>ssh-add命令是把专用密钥添加到ssh-agent的高速缓存中。该命令位置在/usr/bin/ssh-add</p>

<p>如果出现Could not open a connection to your authentication agent.错误提示先执行$ ssh-agent.exe bash，然后执行上面命令；</p>

<pre><code>
-D：删除ssh-agent中的所有密钥

-d：从ssh-agent中的删除密钥

-e pkcs11：删除PKCS#11共享库pkcs1提供的钥匙

-s pkcs11：添加PKCS#11共享库pkcs1提供的钥匙

-L：显示ssh-agent中的公钥

-l：显示ssh-agent中的密钥

-t life：对加载的密钥设置超时时间，超时ssh-agent将自动卸载密钥

-X：对ssh-agent进行解锁

-x：对ssh-agent进行加锁

</code></pre>

<p>在~/.ssh/目录下新建config文件，并添加:</p>

<pre><code>
# github
Host github.com
      HostName github.com
      PreferredAuthentications publickey
      IdentityFile ~/.ssh/id_rsa
      
# gitlib
Host gitlib.com
      HostName gitlib.com
      PreferredAuthentications publickey
      IdentityFile ~/.ssh/id_rsa_gitlib

</code></pre>

<p>将id_rsa_gitlib.pub里面的内容复制下来，在gitlib上的账户里面找到所示SSH keys，将其粘贴到key内容即可，Title唯一即可随便填，，点击添加需要输入登录密码；</p>

<p><strong>5. 测试</strong></p>

<p>在控制台上测试一下，输入：</p>

<pre><code>
ssh -T git@域名

</code></pre>

<p>只要看到最后一行<code>Welcome to GitLab, chenlj!</code>，说明验证成功了</p>

]]></content>
  </entry>
  
</feed>
