<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GOLOG]]></title>
  <link href="http://golog.cc/atom.xml" rel="self"/>
  <link href="http://golog.cc/"/>
  <updated>2017-06-24T15:17:33+08:00</updated>
  <id>http://golog.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[GO语言中的StructTag类型]]></title>
    <link href="http://golog.cc/structtag-of-go.html"/>
    <updated>2017-06-24T18:57:27+08:00</updated>
    <id>http://golog.cc/structtag-of-go.html</id>
    <content type="html"><![CDATA[
<p>StructTag是什么？在Go语言里，StructTag是一个标记字符串，此字符串可跟随在Struct中字段定义的后面。StructTag就是一系列的 key:”value” 形式的组合，其中key是一个不可为空的字符串，key-value组合可以有多个，空格分隔。</p>

<p>StructTag有什么用？！StructTag主要解决了不同类型数据集合间(Struct,Json,Table等)转换中键值Key定义不一样的问题。StructTag可以理解为一个不用数据类型键值Key的映射表Map, 在StructTag中可以定义不用数据集合键值和Struct中Key值的映射关系，这样方便了Struct数据转为其他类型数据的过程。例如我们可以把Struct数据映射成为一个Json格式的数据，或者把Struct数据映射成为一个数据表Table。当然我们也可以依据StructTag的定义，把一个Json数据转为一个Struct结构数据。</p>

<p>下面，我们可以看一下，Struct和Json数据间的互相转换的例子：</p>

<pre><code>package main  
import (  
  &quot;fmt&quot;
  &quot;encoding/json&quot;
)
type Person struct {  
  FirstName string `json:&quot;first_name&quot;` //FirstName &lt;=&gt; firest_name 
  LastName string `json:&quot;last_name&quot;` 
  MiddleName string `json:&quot;middle_name,omitempty&quot;` 
} 
func main() {  
  json_string := ` { &quot;first_name&quot;: &quot;John&quot;, &quot;last_name&quot;: &quot;Smith&quot; }`
  person := new(Person)
  json.Unmarshal([]byte(json_string), person) //将json数据转为Person Struct 
  fmt.Println(person) 
  new_json, _ := json.Marshal(person) //将Person Sturct 转为json格式   
  fmt.Printf(&quot;%s\n&quot;, new_json) 
} 

// *Output* 
// &amp;{John Smith } 
// {&quot;first_name&quot;:&quot;John&quot;,&quot;last_name&quot;:&quot;Smith&quot;}
</code></pre>

<p>从上面的代码可看出，结构体间的数据转换可以不用严格遵循一对一的转换，例如Person Struct 中定义的MiddleName，如果json数据定义中无此字段，可以在StructTag中加入”omitempty”, 标识该字段的数据可忽略。</p>

<p>注意：有时候在Struct转Json的时候，Struct里的key是大写首字母的，如果在转Json的时候，变小写字母，或者其他的名字，就可以用StructTag的方式。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用的Linux命令]]></title>
    <link href="http://golog.cc/linux-commandp-in-common-use.html"/>
    <updated>2017-06-24T15:12:23+08:00</updated>
    <id>http://golog.cc/linux-commandp-in-common-use.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">1. 查看文件大小</h3>

<p>查看当前文件夹下所有文件大小（包括子文件夹）</p>

<pre><code>du -sh
</code></pre>

<p>后面可以跟具体的文件夹名称</p>

<span id="more"></span><!-- more -->

<h3 id="toc_1">2. 查看磁盘空间大小命令</h3>

<p>df -h Df命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式： </p>

<pre><code>df -hl 

</code></pre>

<p>显示格式为： </p>

<pre><code>文件系统 容量 已用 可用 已用% 挂载
</code></pre>

<h3 id="toc_2">3. 清理Git占用的空间</h3>

<p>通过以下的命令，清空git占用的一些空间：</p>

<pre><code>git gc
</code></pre>

<p>该命令可以在任何位置上运行。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用的sublime插件集合 – sublime推荐必备插件]]></title>
    <link href="http://golog.cc/plugins-of-sublime.html"/>
    <updated>2017-06-23T17:02:03+08:00</updated>
    <id>http://golog.cc/plugins-of-sublime.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">1. Package Control</h3>

<p>功能：安装包管理</p>

<p>简介：sublime插件控制台，提供添加、删除、禁用、查找插件等功能</p>

<p>使用：<a href="https://sublime.wbond.net/installation">https://sublime.wbond.net/installation</a></p>

<span id="more"></span><!-- more -->

<p>安装方法：</p>

<ol>
<li><p>CTRL+` ，出现控制台</p></li>
<li><p>粘贴以下代码至控制台</p></li>
</ol>

<p>ST2：</p>

<pre><code>    
import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)

</code></pre>

<p>ST3：</p>

<pre><code>
import
urllib.request,os;
pf
=
&#39;Package
 Control.sublime-package&#39;;
ipp
=
sublime.installed_packages_path();
urllib.request.install_opener(
urllib.request.build_opener(
urllib.request.ProxyHandler())
);
open(os.path.join(ipp,
pf),
&#39;wb&#39;).write(urllib.request.urlopen(
&#39;http://sublime.wbond.net/&#39;
+
pf.replace(&#39;
 &#39;,&#39;%20&#39;)).read())
 
</code></pre>

<p>其他方法：</p>

<p>如果以上方法不能安装，请使用下面的方法</p>

<ol>
<li><p>选择菜单：Preferences &gt; Browse Packages</p></li>
<li><p>打开sublime插件安装包文件夹</p></li>
<li><p>下载文件并复制到打开的文件夹</p></li>
<li><p>重启sublime</p></li>
</ol>

<h3 id="toc_1">2. Emmet</h3>

<p>功能：编码快捷键，前端必备</p>

<p>简介：Emmet作为zen coding的升级版，对于前端来说，可是必备插件，如果你对它还不太熟悉，可以在其官网（<a href="http://docs.emmet.io/%EF%BC%89%E4%B8%8A%E7%9C%8B%E4%B8%8B%E5%85%B7%E4%BD%93%E7%9A%84%E6%BC%94%E7%A4%BA%E8%A7%86%E9%A2%91%E3%80%82">http://docs.emmet.io/）上看下具体的演示视频。</a></p>

<p>使用：教程-<a href="http://docs.emmet.io/cheat-sheet/">http://docs.emmet.io/cheat-sheet/</a>、<a href="http://peters-playground.com/Emmet-Css-Snippets-for-Sublime-Text-2/">http://peters-playground.com/Emmet-Css-Snippets-for-Sublime-Text-2/</a></p>

<p><img src="media/14982085236076/emmet.gif" alt="emmet"/></p>

<h3 id="toc_2">3. JSFormat</h3>

<p>功能：JavaScript的代码格式化插件</p>

<p>简介：很多网站的js代码都进行了压缩，一行式的甚至混淆压缩，这让我们看起来很吃力。而这个插件能帮我们把原始代码进行格式的整理，包括换行和缩进等等，是代码一目了然，更快读懂~</p>

<p>使用：在已压缩的JS文件中，右键选择jsFormat或者使用默认快捷键（Ctrl+Alt+F）</p>

<p><img src="media/14982085236076/jsFormat.gif" alt="jsFormat"/></p>

<h3 id="toc_3">4. LESS</h3>

<p>功能：LESS高亮插件</p>

<p>简介：用LESS的同学都知道，sublime没有支持less的语法高亮，所以这个插件可以帮上我们</p>

<p>使用：打开.less文件或者设置为less格式</p>

<p><img src="media/14982085236076/less.gif" alt="less"/></p>

<h3 id="toc_4">5. Less2CSS</h3>

<p>功能：编译Less</p>

<p>简介：监测到文件改动时，编译保存为.css文件</p>

<p>使用：打开.less文件，编写代码保存即可看到同时生成.css的文件，如果没有则需要安装node。不推荐用这种方法编译，要么用koala，要么就用grunt编译。</p>

<h3 id="toc_5">6. Alignment</h3>

<p>功能：”=”号对齐</p>

<p>简介：变量定义太多，长短不一，可一键对齐</p>

<p>使用：默认快捷键Ctrl+Alt+A和QQ截屏冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A；先选择要对齐的文本</p>

<p><img src="media/14982085236076/align.gif" alt="align"/></p>

<h3 id="toc_6">7. sublime-autoprefixer</h3>

<p>功能：CSS添加私有前缀</p>

<p>简介：CSS还未标准化，所以要给各大浏览器一个前缀以解决兼容问题</p>

<p>使用：Ctrl+Shift+P，选择autoprefixer即可。需要安装Node.js。</p>

<p>其他设置如快捷键请参考：<a href="https://sublime.wbond.net/packages/Autoprefixer">https://sublime.wbond.net/packages/Autoprefixer</a></p>

<p><img src="media/14982085236076/prefixer.gif" alt="prefixe"/></p>

<h3 id="toc_7">8. Clipboard History</h3>

<p>功能：粘贴板历史记录</p>

<p>简介：方便使用复制/剪切的内容</p>

<p>使用：</p>

<ul>
<li>Ctrl+alt+v：显示历史记录</li>
<li>Ctrl+alt+d：清空历史记录</li>
<li>Ctrl+shift+v：粘贴上一条记录（最旧）</li>
<li>Ctrl+shift+alt+v：粘贴下一条记录（最新）</li>
</ul>

<p><img src="media/14982085236076/keyboard.gif" alt="keyboard"/></p>

<h3 id="toc_8">9. Bracket Highlighter</h3>

<p>功能：代码匹配</p>

<p>简介：可匹配[], (), {}, “”, ”, <tag></tag>，高亮标记，便于查看起始和结束标记</p>

<p>使用：点击对应代码即可</p>

<p><img src="media/14982085236076/highlight.gif" alt="highlight"/></p>

<h3 id="toc_9">10. Git</h3>

<p>功能：Git管理</p>

<p>简介：插件基本上实现了git的所有功能</p>

<p>使用：<a href="https://github.com/kemayo/sublime-text-git/wiki">https://github.com/kemayo/sublime-text-git/wiki</a></p>

<p><img src="media/14982085236076/git.png" alt="git"/></p>

<h3 id="toc_10">11. jQuery</h3>

<p>功能：jQ函数提示</p>

<p>简介：快捷输入jQ函数，是偷懒的好方法</p>

<p><img src="media/14982085236076/jquery.gif" alt="jquery"/></p>

<h3 id="toc_11">12. Doc​Blockr</h3>

<p>功能：生成优美注释</p>

<p>简介：标准的注释，包括函数名、参数、返回值等，并以多行显示，手动写比较麻烦</p>

<p>使用：输入/<em>、/</em>*然后回车，还有很多用法，请参照</p>

<p><a href="https://sublime.wbond.net/packages/DocBlockr">https://sublime.wbond.net/packages/DocBlockr</a></p>

<p><img src="media/14982085236076/basic.gif" alt="basi"/></p>

<h3 id="toc_12">13. Color​Picker</h3>

<p>功能：调色板</p>

<p>简介：需要输入颜色时，可直接选取颜色</p>

<p>使用：快捷键Windows: ctrl+shift+c</p>

<p><img src="media/14982085236076/14982095581101.jpg" alt=""/></p>

<p><img src="media/14982085236076/14982095671586.jpg" alt=""/></p>

<h3 id="toc_13">14. ConvertToUTF8</h3>

<p>功能：文件转码成utf-8</p>

<p>简介：通过本插件，您可以编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的 GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。ConvertToUTF8 同时支持 Sublime Text 2 和 3。</p>

<p>使用：安装插件后自动转换为utf-8格式</p>

<p><img src="media/14982085236076/uy67y.gif" alt="uy67y"/></p>

<h3 id="toc_14">15. AutoFileName</h3>

<p>功能：快捷输入文件名</p>

<p>简介：自动完成文件名的输入，如图片选取</p>

<p>使用：输入”/”即可看到相对于本项目文件夹的其他文件</p>

<p><img src="media/14982085236076/autofilename.gif" alt="autofilename"/></p>

<h3 id="toc_15">16. Nodejs</h3>

<p>功能：node代码提示</p>

<p>教程：<a href="https://sublime.wbond.net/packages/Nodejs">https://sublime.wbond.net/packages/Nodejs</a></p>

<p><img src="media/14982085236076/14982095335507.jpg" alt=""/><br/>
ZCFcC</p>

<h3 id="toc_16">17. IMESupport</h3>

<p>功能：sublime中文输入法</p>

<p>简介：还在纠结 Sublime Text 中文输入法不能跟随光标吗？试试「IMESupport 」这个插件吧！目前只支持 Windows，在搜索等界面不能很好的跟随光标。</p>

<p>使用：Ctrl + Shift + P →输入pci →输入IMESupport →回车</p>

<p><img src="media/14982085236076/c1608aa0gw1e9dmrd3vxpg209y08d75x.gif" alt="c1608aa0gw1e9dmrd3vxpg209y08d75x"/></p>

<h3 id="toc_17">18. Trailing spaces</h3>

<p>功能：检测并一键去除代码中多余的空格</p>

<p>简介：还在纠结代码中有多余的空格而显得代码不规范？或是有处女座情节？次插件帮你实现发现多余空格、一键删除空格、保存时自动删除多余空格，让你的代码规范清爽起来</p>

<p>使用：安装插件并重启，即可自动提示多余空格。一键删除多余空格：CTRL+SHITF+T（需配置），更多配置请点击标题。快捷键配置：在Preferences / Key Bindings – User加上代码（数组内）</p>

<pre><code>
{
&quot;keys&quot;:
[&quot;ctrl+shift+t&quot;],
&quot;command&quot;:
&quot;delete_trailing_spaces&quot;
}

</code></pre>

<p><img src="media/14982085236076/spac.gif" alt="spa"/></p>

<h3 id="toc_18">19. FileDiffs</h3>

<p>功能：强大的比较代码不同工具</p>

<p>简介：比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别。可配置为显示差别在外部比较工具，精确到行。</p>

<p>使用：右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可</p>

<p><img src="media/14982085236076/diff.gif" alt="diff"/></p>

<h3 id="toc_19">20. GBK Encoding Support</h3>

<p>功能：中文识别</p>

<p>简介：Sublime Text 2可识别UTF-8格式的中文，不识别GBK和ANSI，因此打开很多含中文的文档都会出现乱码。可以通过安装插件GBK Support,来识别GBK和ANSI。</p>

<p>使用：</p>

<ul>
<li>Open a GBK File</li>
<li>Save file with GBK encoding</li>
<li>Change file encoding from utf8 to GBK or GBK to utf8</li>
</ul>

<p><img src="media/14982085236076/14982094859392.jpg" alt=""/></p>

<p><img src="media/14982085236076/14982095005997.jpg" alt=""/></p>

<h3 id="toc_20">21. 增强侧边栏</h3>

<p>SideBarEnhancements插件有效地改进了Sublime Text的侧边栏。安装插件后在侧边栏上点击右键，可以找到一下新功能：在资源管理器中打开、新建文件、新建文件夹、以…打开、在浏览器中打开。</p>

<p><img src="media/14982085236076/14982109732383.jpg" alt=""/></p>

<p>注：在浏览器中打开的热键是F12。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go语言的字符串拼装方式性能对比]]></title>
    <link href="http://golog.cc/comparison-of-different-ways-to-join-strings.html"/>
    <updated>2017-06-21T00:47:38+08:00</updated>
    <id>http://golog.cc/comparison-of-different-ways-to-join-strings.html</id>
    <content type="html"><![CDATA[
<p>Go语言中字符串的拼装方法很多，那么问题来了，到底哪家性能好？</p>

<p>下面代码，分别比较了 fmt.Sprintf，string +，strings.Join，bytes.Buffer，方法是循环若干次比较总时间。</p>

<p>在VMWare下的Ubuntu 14.04下运行的结果表明：</p>

<ul>
<li>fmt.Sprintf 和 strings.Join 速度相当</li>
<li>string + 比上述二者快一倍</li>
<li>bytes.Buffer又比上者快约400-500倍</li>
</ul>

<span id="more"></span><!-- more -->

<p>如果循环内每次都临时声明一个bytes.Buffer来使用，会比持续存在慢50%，但是仍然很快</p>

<p>测试代码如下：</p>

<pre><code>
package main

import (
    &quot;bytes&quot;
    &quot;fmt&quot;
    &quot;strings&quot;
    &quot;time&quot;
)

func benchmarkStringFunction(n int, index int) (d time.Duration) {
    v := &quot;ni shuo wo shi bu shi tai wu liao le a?&quot;
    var s string
    var buf bytes.Buffer

    t0 := time.Now()
    for i := 0; i &lt; n; i++ {
        switch index {
        case 0: // fmt.Sprintf
            s = fmt.Sprintf(&quot;%s[%s]&quot;, s, v)
        case 1: // string +
            s = s + &quot;[&quot; + v + &quot;]&quot;
        case 2: // strings.Join
            s = strings.Join([]string{s, &quot;[&quot;, v, &quot;]&quot;}, &quot;&quot;)
        case 3: // temporary bytes.Buffer
            b := bytes.Buffer{}
            b.WriteString(&quot;[&quot;)
            b.WriteString(v)
            b.WriteString(&quot;]&quot;)
            s = b.String()
        case 4: // stable bytes.Buffer
            buf.WriteString(&quot;[&quot;)
            buf.WriteString(v)
            buf.WriteString(&quot;]&quot;)
        }

        if i == n-1 {
            if index == 4 { // for stable bytes.Buffer
                s = buf.String()
            }
            fmt.Println(len(s)) // consume s to avoid compiler optimization
        }
    }
    t1 := time.Now()
    d = t1.Sub(t0)
    fmt.Printf(&quot;time of way(%d)=%v\n&quot;, index, d)
    return d
}

func main() {
    k := 5
    d := [5]time.Duration{}
    for i := 0; i &lt; k; i++ {
        d[i] = benchmarkStringFunction(10000, i)
    }

    for i := 0; i &lt; k-1; i++ {
        fmt.Printf(&quot;way %d is %6.1f times of way %d\n&quot;, i, float32(d[i])/float32(d[k-1]), k-1)
    }
}

</code></pre>

<p>其中一次的结果如下：</p>

<pre><code>
etworker@ubuntu:~/work/go/test$ go run testBenchmark.go 
410000
time of way(0)=1.199641573s
410000
time of way(1)=568.716669ms
410000
time of way(2)=1.197077483s
41
time of way(3)=2.277063ms
410000
time of way(4)=1.398864ms
way 0 is  857.6 times of way 4
way 1 is  406.6 times of way 4
way 2 is  855.7 times of way 4
way 3 is    1.6 times of way 4

</code></pre>

<p>经测试，连接100万个字符串，使用buffer消耗的时间约为77毫秒，使用+=消耗的时间为.....抱歉，等了5分钟结果没跑出来，减小数量级后，连接10万字符串的时间为3312毫秒</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GO语言重量级WEB框架BEEGO]]></title>
    <link href="http://golog.cc/beego-web-framework-of-golang.html"/>
    <updated>2017-06-16T23:09:29+08:00</updated>
    <id>http://golog.cc/beego-web-framework-of-golang.html</id>
    <content type="html"><![CDATA[
<p>BEEGO作为GO语言的重量级框架，被很多人用在了各自的项目当中。可以在Beego的官方网站（<a href="http://beego.me">Beego</a>）上查看应用案例，不少是大型的企业，以及大型的项目。</p>

<span id="more"></span><!-- more -->

<p>从这篇开始，在使用Beego这个框架做项目的时候，陆续的记录一些笔记，供大家（也包括自己）参考使用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下执行git命令出现xcrun： error： invalid active developer path错误的处理方法]]></title>
    <link href="http://golog.cc/mac-xcrun-error-fixed.html"/>
    <updated>2017-06-16T22:48:46+08:00</updated>
    <id>http://golog.cc/mac-xcrun-error-fixed.html</id>
    <content type="html"><![CDATA[
<p>在Mac下，执行git命令时候出现如下的错误：</p>

<pre><code>
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun

</code></pre>

<span id="more"></span><!-- more -->

<p>解决方法：</p>

<p>打开终端输入</p>

<p>xcode-select --install</p>

<p>回车后，系统弹出下载xcode，点击确认，下载完成后即可。</p>

<p>猜测可能是跟xcode卸载或者升级有些关系，一些插件或组件被破坏了，重新安装下就好。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Git的钩子实现自动部署]]></title>
    <link href="http://golog.cc/auto-deploy-with-git-hook.html"/>
    <updated>2016-10-08T16:04:47+08:00</updated>
    <id>http://golog.cc/auto-deploy-with-git-hook.html</id>
    <content type="html"><![CDATA[
<ol>
<li>通过服务器系统自带git或者其他的方式，例如gogs，搭建git仓库。这里要注意，搭建git仓库时，要创建一个git用户。对于客户端而言，服务器是远端；对于服务器本机而言，就是本机。</li>
</ol>

<span id="more"></span><!-- more -->

<ol>
<li><p>在git仓库里，创建一个仓库，用于客户端上传文件使用。通过类似gitlab或者gogs之类工具，这里创建的仓库是在指定的位置。</p>

<p>这一步的操作是在服务器上，记住路径，例如/var/git/testRep。</p></li>
<li><p>进入服务器上的部署文件夹，假如是/var/testDeploy,</p>

<p>在该目录下，运行：</p>

<pre><code>
git clone /var/git/testRep /var/testDeploy

</code></pre>

<p>相当于初始化本地一个库，后续就可以通过git pull来更新文件了</p>

<blockquote>
<p>注意：删除已有的文件夹中的文件、删除.git文件夹之后，要切换到git用户之下，使用git用户重新git clone一遍，才可以自动的进行部署，因为部署需要用git用户进行操作，在root做所有的操作，git就没办法把更新的文件部署到发布的目录下面。</p>
</blockquote></li>
<li><p>在服务器上的仓库/var/git/testRep.git/下面，找到hook文件夹，找到其中的post-receive文件，这个是响应在post的钩子文件，运行这个文件定义的脚本，对这个文件脚本进行编写：</p>

<pre><code>
unset GIT_DIR
DeployDir=/var/testDeploy/
cd $DeployDir
git add . -A &amp;&amp; git stash
git pull origin master

</code></pre>

<p>实现把文件pull部署文件夹，从而实现自动部署。</p>

<p>以上方法步骤，验证通过。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下切换用户的命令]]></title>
    <link href="http://golog.cc/change-user-os.html"/>
    <updated>2016-10-08T00:07:00+08:00</updated>
    <id>http://golog.cc/change-user-os.html</id>
    <content type="html"><![CDATA[
<ol>
<li>增加用户，在root下：</li>
</ol>

<pre><code>
add user git

</code></pre>

<p>表示增加git用户。</p>

<ol>
<li>切换用户</li>
</ol>

<pre><code>
su git

</code></pre>

<p>切换成git用户。</p>

<p>从root用户切换到其他用户不需要密码，从其他用户切换到root用户，需要输入密码。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何升级CentOS 6.5下的MySQL]]></title>
    <link href="http://golog.cc/how-to-update-mysql-in-centos.html"/>
    <updated>2016-10-07T22:05:57+08:00</updated>
    <id>http://golog.cc/how-to-update-mysql-in-centos.html</id>
    <content type="html"><![CDATA[
<ul>
<li>1. 备份数据库，升级MySQL通常不会丢失数据，但保险起见，我们需要做这一步。输入命令：</li>
</ul>

<pre><code>
mysqldump -u xxx -h xxx -P 3306 -p --all-databases &gt; databases.sql

</code></pre>

<span id="more"></span><!-- more -->

<ul>
<li>2. 停止MySQL服务，输入命令：</li>
</ul>

<pre><code>
service mysqld stop

</code></pre>

<ul>
<li>3. 卸载旧版MySQL，输入命令：</li>
</ul>

<pre><code>
yum remove mysql mysql-*

</code></pre>

<ul>
<li>4. 移除命令执行后，可再看看是否有残余的mysql，输入命令：</li>
</ul>

<pre><code>
yum list installed | grep mysql

</code></pre>

<p>如果有，可输入命令删除：</p>

<pre><code>
rum remove mysql－libs

</code></pre>

<ul>
<li>5. 下载安装最新的rpm文件</li>
</ul>

<pre><code>
rpm -Uvh http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm

</code></pre>

<ul>
<li>6. 安装MySQL，输入命令：</li>
</ul>

<pre><code>
yum install mysql-community-server

</code></pre>

<ul>
<li>7. 安装完成后，输入命令查看MySQL版本号：</li>
</ul>

<pre><code>
mysql -V

</code></pre>

<ul>
<li>8. 启动MySQL，输入命令：</li>
</ul>

<pre><code>
service mysqld start

</code></pre>

<p>在经过上面的方法升级之后，Mysql启动时，可能会报错，复发启动，查看/var/log/mysqld.log发现：</p>

<pre><code>
[ERROR] InnoDB: auto-extending data file ./ibdata1 is of a different size 640 pages (rounded down to MB) than specified in the .cnf file: initial 768 pages, max 0 (relevant if non-zero) pages!

</code></pre>

<p>可以采用下面的方法来处理：</p>

<pre><code>
rm -rf /var/lib/mysql/ib*

</code></pre>

<p>删除ibdata1、ib_logfile0、ib_logfile1等文件，再重启Mysql即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS下Mysql无法启动，提示“Another MySQL daemon already running”]]></title>
    <link href="http://golog.cc/centos-Another-MySQL-daemon-already-running.html"/>
    <updated>2016-10-07T21:04:41+08:00</updated>
    <id>http://golog.cc/centos-Another-MySQL-daemon-already-running.html</id>
    <content type="html"><![CDATA[
<p>有些情况下，CentOS下的Mysql启动不了，采用:</p>

<pre><code>
service mysqld restart

service mysqld start

</code></pre>

<p>都解决不了，会提示：</p>

<pre><code>
Another MySQL daemon already running with the same unix socket.

</code></pre>

<span id="more"></span><!-- more -->

<p>目前，具体造成该问题的原因，暂且不知，但可以采取以下的方法，解决这个问题：</p>

<ol>
<li><p>重启服务器</p></li>
<li><p>采用如下的命令：</p></li>
</ol>

<pre><code>
# mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak

# service mysqld start

</code></pre>

<p>相当于删除mysql.sock，重新启动mysql服务，重新生成一个有效的mysql.sock，问题就可以解决。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThinkGo类ThinkPHP的Go语言WEB开发框架]]></title>
    <link href="http://golog.cc/thinkgo-web-frame-project.html"/>
    <updated>2016-10-07T19:02:19+08:00</updated>
    <id>http://golog.cc/thinkgo-web-frame-project.html</id>
    <content type="html"><![CDATA[
<p>ThinkGo 是一款 Go 语言编写的 web 快速开发框架。</p>

<p>它基于开源框架 Gin 进行二次开发，旨在实现一种类 ThinkPHP 的高可用、高效率的 web 框架。</p>

<p>它最显著的特点是模块、控制器、操作三段式的标准 MVC 架构，且模块与插件的目录结构完全一致，令开发变得非常简单灵活。</p>

<span id="more"></span><!-- more -->

<p>该项目Github链接：<a href="https://github.com/henrylee2cn/thinkgo">https://github.com/henrylee2cn/thinkgo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack 的开源替代品 Mattermost]]></title>
    <link href="http://golog.cc/mattermost-go-project.html"/>
    <updated>2016-10-07T18:27:08+08:00</updated>
    <id>http://golog.cc/mattermost-go-project.html</id>
    <content type="html"><![CDATA[
<p>Mattermost 是一个 Slack 的开源替代品。Mattermost 采用 Go 语言开发，这是一个开源的团队通讯服务。为团队带来跨 PC 和移动设备的消息、文件分享，提供归档和搜索功能。</p>

<p>Slack 是聊天群组 + 大规模工具集成 + 文件整合 + 统一搜索。截至2014年底，Slack 已经整合了电子邮件、短信、Google Drives、Twitter、Trello、Asana、GitHub 等 65 种工具和服务，把可以把各种碎片化的企业沟通和协作集中到一起。</p>

<span id="more"></span><!-- more -->

<p><img src="media/14758360281130/14758360579753.png" alt=""/></p>

<p><img src="media/14758360281130/14758360724395.png" alt=""/></p>

<p><img src="media/14758360281130/14758360833394.gif" alt=""/></p>

<p>项目Github链接：<a href="http://github.com/mattermost/platform">http://github.com/mattermost/platform</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单 golang 日志 Golog]]></title>
    <link href="http://golog.cc/golog-log-project.html"/>
    <updated>2016-10-07T18:15:02+08:00</updated>
    <id>http://golog.cc/golog-log-project.html</id>
    <content type="html"><![CDATA[
<p>Golog 是简单的golang日志，基于golang内置log封装.</p>

<p>特征</p>

<ol>
<li><p>实现各种日志 level: DEBUG, INFO, WARN, ERROR</p></li>
<li><p>实现各种日志 handlers: ConsoleHander, FileHandler, RotatingHandler</p></li>
</ol>

<span id="more"></span><!-- more -->

<p>代码实例</p>

<pre><code>// rotating hander, max log files is 4, max file size is 4M
rotatingHandler := logger.NewRotatingHandler(&quot;./&quot;, &quot;test.log&quot;, 4, 4*1024*1024)

// logger set handlers: console, rotating
logger.SetHandlers(logger.Console, rotatingHandler)

defer logger.Close()

// logger set flags
logger.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)

// logger set log level
logger.SetLevel(logger.INFO)

logger.Debug(&quot;something&quot;, &quot;debug&quot;)
logger.Info(&quot;something&quot;)
logger.Warn(&quot;something&quot;)
logger.Error(&quot;something&quot;)
</code></pre>

<p>项目Github链接：<a href="https://github.com/jander/golog">https://github.com/jander/golog</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go 编写的内容管理系统 Fragmenta CMS]]></title>
    <link href="http://golog.cc/fragmenta-cms-project.html"/>
    <updated>2016-10-07T18:04:12+08:00</updated>
    <id>http://golog.cc/fragmenta-cms-project.html</id>
    <content type="html"><![CDATA[
<p>Fragmenta CMS 是一个用户友好的内容管理系统，用 Go 编写。</p>

<p>Fragmenta CMS 可以让你快速建立网站，它包办了创建网站的一般性的繁琐工作，包括：用户登录，网页，博客文章等，让你专注于你 app 自身的特点，你可以:</p>

<span id="more"></span><!-- more -->

<ul>
<li><p>简单部署 —— 你只需要一个数据库和fragment —— 与内置的Web服务器本地进行测试</p></li>
<li><p>使用与你网站相同的风格进行Rich editing</p></li>
<li><p>免费且开源 (MIT) ——下载二进制文件或自己编译</p></li>
</ul>

<p>项目的Github链接：<a href="http://github.com/fragmenta/fragmenta-cms">http://github.com/fragmenta/fragmenta-cms</a></p>

<p>项目的主页链接：<a href="http://fragmenta.eu/">http://fragmenta.eu/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go build时的错误分析]]></title>
    <link href="http://golog.cc/error-of-go-build.html"/>
    <updated>2016-07-22T18:38:27+08:00</updated>
    <id>http://golog.cc/error-of-go-build.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">go build 错误一</h2>

<p>如果出现：</p>

<pre><code>
warning: building out-of-date packages:

runtime/pprof

testing

regexp/syntax

regexp

installing these packages with &#39;go test -i&#39; will speed future tests.

</code></pre>

<span id="more"></span><!-- more -->

<p>那么就是说明下面的包已经有修改过了，但是没有重新install<br/>
如果有标准的包过期，使用<code>go install -a -v std</code>来进行更新。</p>

<p>如果是自定义的包过期，重新调用<code>go instal</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go中获取各种路径]]></title>
    <link href="http://golog.cc/get-path-with-golang.html"/>
    <updated>2016-07-22T18:45:18+08:00</updated>
    <id>http://golog.cc/get-path-with-golang.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>执行用户当前所在路径：</p>

<pre><code>
os.Getwd()

</code></pre></li>
<li><p>执行程序所在路径：</p>

<p>执行程序文件相对路径：</p>

<pre><code>
file, _ := exec.LookPath(os.Args[0])

</code></pre>

<span id="more"></span><!-- more -->

<p>执行程序所在的绝对路径：</p>

<p>（使用下面一套方法）</p>

<pre><code>
file, _ := exec.LookPath(os.Args[0])
log.Println(&quot;file:&quot;, file)
dir,_ := path.Split(file)
log.Println(&quot;dir:&quot;, dir)
os.Chdir(dir)
wd, _ := os.Getwd()
log.Println(&quot;wd:&quot;, wd)

</code></pre>

<p>比如这个程序</p>

<pre><code>package main
import(
    &quot;os&quot;
    &quot;log&quot;
    &quot;os/exec&quot;
    &quot;path&quot;
)
func main() {
    file, _ := os.Getwd()
    log.Println(&quot;current path:&quot;, file)
    file, _ = exec.LookPath(os.Args[0])
    log.Println(&quot;exec path:&quot;, file)
    dir,_ := path.Split(file)
    log.Println(&quot;exec folder relative path:&quot;, dir)
    os.Chdir(dir)
    wd, _ := os.Getwd()
    log.Println(&quot;exec folder absolute path:&quot;, wd)
}

</code></pre>

<p>可执行文件我放在<code>/home/houqun/handcode/test</code><br/>
我执行的路径是<code>/home/houqun/</code></p>

<p>返回结果：</p>

<pre><code>[houqun@HouTekiMacbook ~]$ handcode/test
2013/02/06 11:09:07 current path: /home/houqun
2013/02/06 11:09:07 exec path: handcode/test
2013/02/06 11:09:07 exec folder relative path: handcode/
2013/02/06 11:09:07 exec folder absolute path: /home/houqun/handcode
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[操作系统相关操作]]></title>
    <link href="http://golog.cc/operation-of-os.html"/>
    <updated>2016-07-22T18:43:07+08:00</updated>
    <id>http://golog.cc/operation-of-os.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>linux下获取进程信息是使用/proc/pid/</p></li>
<li><p>判断当前用户是否是root用户</p>

<pre><code>
os.Geteuid() != 0

</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path包]]></title>
    <link href="http://golog.cc/path-package.html"/>
    <updated>2016-07-22T18:32:21+08:00</updated>
    <id>http://golog.cc/path-package.html</id>
    <content type="html"><![CDATA[
<p>path.clean用于对路径../../等进行过滤，在创建、修改文件的时候需要使用，否则会有漏洞</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go time package 时间包]]></title>
    <link href="http://golog.cc/time-package-of-golang.html"/>
    <updated>2016-07-22T18:54:24+08:00</updated>
    <id>http://golog.cc/time-package-of-golang.html</id>
    <content type="html"><![CDATA[
<p>go 的time package 提供了time.Format函数，用来对时间进行格式化输出。</p>

<p>类似的还有time.Parse用来解析字符串类型的时间到time.Time。这是两个互逆的函数。</p>

<span id="more"></span><!-- more -->

<p>问题是，go采用的格式化layout 和我们以往所用的任何经验都不同。以至于初次接触总是一头雾水。</p>

<p>其实go提供的这个layout对算法的实现非常科学高效，而且很规律。下面我们详细分解下。</p>

<p><strong>直接上个对应表：</strong></p>

<p>前面是含义，后面是 go 的表示值,多种表示,逗号&quot;,&quot;分割：</p>

<ul>
<li>月份 1,01,Jan,January</li>
<li>日　 2,02,_2</li>
<li>时　 3,03,15,PM,pm,AM,am</li>
<li>分　 4,04</li>
<li>秒　 5,05</li>
<li>年　 06,2006</li>
<li>时区 -07,-0700,Z0700,Z07:00,-07:00,MST</li>
<li>周几 Mon,Monday</li>
</ul>

<p>您看出规律了么！哦是的，你发现了，这里面没有一个是重复的，所有的值表示都唯一对应一个时间部分。并且涵盖了很多格式组合。</p>

<!-- more -->

<p><strong>比如小时的表示(原定义是下午3时，也就是15时)</strong></p>

<ul>
<li>3 用12小时制表示，去掉前导0</li>
<li>03 用12小时制表示，保留前导0</li>
<li>15 用24小时制表示，保留前导0</li>
<li>03pm 用24小时制am/pm表示上下午表示，保留前导0</li>
<li>3pm 用24小时制am/pm表示上下午表示，去掉前导0
又比如月份</li>
<li>1 数字表示月份，去掉前导0</li>
<li>01 数字表示月份，保留前导0</li>
<li>Jan 缩写单词表示月份</li>
<li>January 全单词表示月份</li>
</ul>

<p><strong>实例对应</strong></p>

<p>真实时间：我的UTC时间是 2013年12月5日，我的本地时区是Asia </p>

<p>字符表示：　　2013 12 5 Asia</p>

<p>Go Layout：　2006 01 2 MST</p>

<p>真实时间：我的UTC时间是 2013年12月22点，我的本地时区是Asia</p>

<p>字符表示：　　2013 12 22 Asia</p>

<p>Go Layout：　2006 01 15 MST</p>

<p>是滴，上面这个时间是合法的，虽然没有说是那一天，但是说了小时。而所有这些数字的顺序正好是1,2,4,5,6,7和一个时区MST。</p>

<p>其实还有一个秒的 repeated digits for fractional seconds 表示法，用的是 0和9 ,很少用，源代码里面是这样写的</p>

<pre><code>1. stdFracSecond0                          // &quot;.0&quot;, &quot;.00&quot;, ... , trailing zeros included
2. stdFracSecond9                          // &quot;.9&quot;, &quot;.99&quot;, ..., trailing zeros omitted
</code></pre>

<p><strong>那些分界符</strong></p>

<p>除了那些值之外的都是分界符号，自然匹配了，直接举例子吧</p>

<p>字符表示：　　2013-12 21 Asia</p>

<p>Go Layout：　2006-01 15 MST</p>

<p>字符表示：　　2013年12月21时 时区Asia</p>

<p>Go Layout：　2006年01月15时 时区MST</p>

<p>好了，您是否感觉这个表示方法兼容度更好，适应性更强呢，更容易记忆呢。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go 类型转换]]></title>
    <link href="http://golog.cc/change-type-of-data.html"/>
    <updated>2016-07-22T18:51:23+08:00</updated>
    <id>http://golog.cc/change-type-of-data.html</id>
    <content type="html"><![CDATA[
<ol>
<li><p>整型到字符串</p>

<pre><code>s = strconv.Itoa(i) 

s = strconv.FormatInt(int64(i), 10)
</code></pre></li>
<li><p>字符串到整型</p>

<pre><code>i, err = strconv.Atoi(s)

i, err = ParseInt(s, 10, 0) 
</code></pre>

<span id="more"></span><!-- more --></li>
<li><p>字符串到float（32/64）</p>

<pre><code>f, err = ParseFloat(s, 32) `
</code></pre></li>
<li><p>整型到float或者float到整型</p>

<pre><code>float(i)

int(f)
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
