<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GOLOG]]></title>
  <link href="http://golog.cc/atom.xml" rel="self"/>
  <link href="http://golog.cc/"/>
  <updated>2019-02-23T10:53:35+08:00</updated>
  <id>http://golog.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Go语言微服务实践]]></title>
    <link href="http://golog.cc/15508824829994.html"/>
    <updated>2019-02-23T08:41:22+08:00</updated>
    <id>http://golog.cc/15508824829994.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">consul</h2>

<p>执行命令</p>

<pre><code>consul agent -server -bootstrap-expect=1  -node=hq-server -bind=127.0.0.1 -data-dir=~/temp -ui

</code></pre>

<p>consul使用手册参考：<a href="https://blog.csdn.net/liuzhuchen/article/details/81913562">https://blog.csdn.net/liuzhuchen/article/details/81913562</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用beego的ParseForm把form数据解析成Struct时，部分数据解析不出来]]></title>
    <link href="http://golog.cc/problem-of-ParseForm-function-of-beego.html"/>
    <updated>2018-08-20T13:46:55+08:00</updated>
    <id>http://golog.cc/problem-of-ParseForm-function-of-beego.html</id>
    <content type="html"><![CDATA[
<p>经过一番查找，User字段中，有个关联的字段，使用的RoleIds []int64，这个数据解析不出来。</p>

<p>后来调整成RoleIds []int，数据就能够解析出来了。</p>

<p>虽然问题找到并解决了，但是不清楚问题的真实原因是什么，后续需要仔细的研究。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置Mac终端提示符颜色以及设置golang环境变量]]></title>
    <link href="http://golog.cc/15345015075900.html"/>
    <updated>2018-08-17T18:25:07+08:00</updated>
    <id>http://golog.cc/15345015075900.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">设置Mac终端提示符颜色</h2>

<pre><code>
export LS_OPTIONS=&#39;--color=auto&#39; # 如果没有指定，则自动选择颜色
export CLICOLOR=1 #是否输出颜色
export LSCOLORS=&#39;Exfxcxdxbxegedabagacad&#39; #指定颜色
export PS1=&#39;\[\033[01;33m\]\u@\h\[\033[01;31m\] \W\$\[\033[00m\] &#39;

</code></pre>

<pre><code>
export LS_OPTIONS=&#39;--color=auto&#39; #如果没有指定，则自动选择颜色
export CLICOLOR=&#39;Yes&#39; #是否输出颜色
export LSCOLORS=&#39;CxfxcxdxbxegedabagGxGx&#39; #指定颜色
export TERM=&quot;xterm-color&quot;
\# PS1=&#39;\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ &#39;
export PS1=&#39;\[\033[01;33m\]\u@\h\[\033[01;31m\] \W\$\[\033[00m\] &#39;

</code></pre>

<h2 id="toc_1">定义Go语言环境变量</h2>

<pre><code>
export GOPATH=/Users/houqun/Code/GoCode
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN

</code></pre>

<pre><code>
export GOPATH=/Users/houqun/Code/GoCode
export PATH=$PATH:$GOPATH/bin
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里云服务上，gogs的安装与迁移]]></title>
    <link href="http://golog.cc/15344946625117.html"/>
    <updated>2018-08-17T16:31:02+08:00</updated>
    <id>http://golog.cc/15344946625117.html</id>
    <content type="html"><![CDATA[
<p>之前在一台阿里云服务器上装了gogs，作为个人的代码管理工具。</p>

<p>这台阿里云服务器到期，换了一台新的阿里云服务器，就需要在新服务器上安装gogs，且要把原服务器上的gogs的数据迁移到新服务器上。</p>

<p>这里记录这个迁移过程，留作以后参考备用。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">gogs的安装</h2>

<ol>
<li><p>下载linux版本的gogs二进制安装包，下载地址：<a href="https://dl.gogs.io">gogs</a> ；</p></li>
<li><p>解压安装包，上传到阿里云服务器上，放到你喜欢的位置上；</p></li>
<li><p>按照<a href="https://gogs.io">gogs</a>网站主页的内容进行操作，运行命令./gogs web，启动gogs的服务，通过IP+端口访问，具体端口可在gogs运行时的命令行提示的信息中找到；</p></li>
<li><p>若在上一步发现操作中，发现通过IP+端口访问不到gogs，很可能是因为阿里云没有开放出gogs运行所需要的端口；在阿里云WEB端的管理后台，开放出gogs所需要的端口即可；</p></li>
<li><p>第一次运行gogs时，会跳转到初始安装的界面，按照提示填写安装的信息即可；在安装的过程中，需要填写运行的用户，可以根据需要创建一个git用户；不怕风险的话，也可以直接用root用户（不建议）。</p></li>
<li><p>若系统中没有安装git，还需要先安装git工具</p></li>
</ol>

<h2 id="toc_1">git的安装</h2>

<ol>
<li>安装Git依赖</li>
</ol>

<pre><code>
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel

</code></pre>

<p>2.安装Git</p>

<pre><code>
yum install -y git

</code></pre>

<p>验证正常安装，安装环境是CentOS6.5。</p>

<p>安装之后，通过以下命令查看是否git版本，同时判断是否安装成功。</p>

<pre><code>
git --version

</code></pre>

<p>也可以通过<code>whereis git</code>命令来查看。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨平台交叉编译Go程序]]></title>
    <link href="http://golog.cc/cross-compiling-of-golang.html"/>
    <updated>2018-08-14T13:01:31+08:00</updated>
    <id>http://golog.cc/cross-compiling-of-golang.html</id>
    <content type="html"><![CDATA[
<p>作用：比如你手头只有Mac系统，而你的用户有Linux和Windows的，他们也想用，你可以通过交叉编译出Linux和Windows上的可执行文件给他们用</p>

<span id="more"></span><!-- more -->

<p>(1)首先进入go/src 源码所在目录，执行如下命令创建目标平台所需的包和工具文件。</p>

<pre><code>
$ cd /usr/local/go/src
$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash

</code></pre>

<p>如果是 Windows 则修改 GOOS 即可。</p>

<pre><code>
$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash

</code></pre>

<p>(2) 现在可以编译 Linux 和 Windows 平台所需的执行文件了。</p>

<pre><code>
$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build
$ CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build

</code></pre>

<p>不过该方式暂时不支持 CGO。</p>

<p>以上假定是64位架构，32位，修改GOARCH为386</p>

<p>说明：</p>

<p>这里并不是重新编译Go，因为安装Go的时候，只是编译了本地系统需要的东西；而需要跨平台交叉编译，需要在Go中增加对其他平台的支持。所以，有 ./make.bash 这么一个过程</p>

<p>交叉编译问题补充：</p>

<p>首先，建议安装Go语言通过源码安装，否则可能没有make.bash或make.bat程序。</p>

<p>之所以需要执行上面的这些步骤，是因为安装Go语言时，一些工具和平台相关的代码并没有生成，执行上面的步骤，并不是重新安装Go语言，而是生成交叉编译（目标平台）需要的工具和文件。这些只是在第一次交叉编译的时候做。之后就不需要了。</p>

<p>为了更快的编译，可以</p>

<pre><code>
./make.bash --no-clean

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go run main.go杀掉进程的方法]]></title>
    <link href="http://golog.cc/how-to-kill-go-run-process.html"/>
    <updated>2018-08-12T13:08:50+08:00</updated>
    <id>http://golog.cc/how-to-kill-go-run-process.html</id>
    <content type="html"><![CDATA[
<p>可以通过下面的命令来处理：</p>

<pre><code>
lsof -i tcp:端口号

kill PID 

</code></pre>

<p>也可以通过下面的命令来处理：</p>

<pre><code>
killall -9 main

</code></pre>

<p>其中的main，就是main.go运行之后的进程名称。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[golang安装gRPC]]></title>
    <link href="http://golog.cc/install-grpc-of-golang.html"/>
    <updated>2018-08-05T23:11:48+08:00</updated>
    <id>http://golog.cc/install-grpc-of-golang.html</id>
    <content type="html"><![CDATA[
<p>gRPC安装官方安装命令：</p>

<pre><code>go get google.golang.org/grpc

</code></pre>

<p>这个安装命令是有问题的，会报：</p>

<pre><code>package google.golang.org/grpc: unrecognized import path &quot;google.golang.org/grpc&quot;(https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)

</code></pre>

<span id="more"></span><!-- more -->

<p>这个代码已经转移到github上面了，但是代码里面的包依赖还是没有修改，还是google.golang.org这种，因此不能直接用go get的方式安装，而是要采用下面的方式进行安装：</p>

<pre><code>
git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc
    
git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net
    
git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text
    
go get -u github.com/golang/protobuf/{proto,protoc-gen-go}
    
git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto
     
cd $GOPATH/src/
go install google.golang.org/grpc

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里云vps上mysql挂掉的解决办法]]></title>
    <link href="http://golog.cc/solution-to-solve-mysql-break-down-in-aliyun-vps.html"/>
    <updated>2017-12-20T16:25:34+08:00</updated>
    <id>http://golog.cc/solution-to-solve-mysql-break-down-in-aliyun-vps.html</id>
    <content type="html"><![CDATA[
<p>用阿里云的vps用作blog服务器，系统很稳定，已经100多天一直运行正常，大概从上个月开始发现blog的mysql会有时挂掉，会收到短信通知。之前没太追究，重新启动了mysql解决的。今天上午又收到短信，已经第三次了。</p>

<p>查了一下日志，三次基本都是一样的：</p>

<span id="more"></span><!-- more -->

<pre><code>
130728  6:50:14 [Note] Plugin &#39;FEDERATED&#39; is disabled.
130728  6:50:14 InnoDB: The InnoDB memory heap is disabled
130728  6:50:14 InnoDB: Mutexes and rw_locks use GCC atomic builtins
130728  6:50:14 InnoDB: Compressed tables use zlib 1.2.3.4
130728  6:50:14 InnoDB: Initializing buffer pool, size = 128.0M
InnoDB: mmap(137363456 bytes) failed; errno 12
130728  6:50:14 InnoDB: Completed initialization of buffer pool
130728  6:50:14 InnoDB: Fatal error: cannot allocate memory for the buffer pool
130728  6:50:14 [ERROR] Plugin &#39;InnoDB&#39; init function returned error.
130728  6:50:14 [ERROR] Plugin &#39;InnoDB&#39; registration as a STORAGE ENGINE failed.
130728  6:50:14 [ERROR] Unknown/unsupported storage engine: InnoDB
130728  6:50:14 [ERROR] Aborting
130728  6:50:14 [Note] /usr/sbin/mysqld: Shutdown complete

</code></pre>

<p>解决方法：<br/>
1) 在 /etc/mysql/my.cnf 的 mysqld 下增加下面一句：</p>

<p>innodb_buffer_pool_size = 64M</p>

<p>还要设置一下swap分区，因为我的vps是没有swap分区的，通过fdisk -l 和 1mount 看不到swap的信息，需要手动添加一下。</p>

<p>2) 添加swap分区的步骤：</p>

<pre><code>
2.1) dd if=/dev/zero of=/swapfile bs=1M count=1024
2.2) mkswap /swapfile
2.3) swapon /swapfile
2.4) 添加这行： /swapfile swap swap defaults 0 0 到 /etc/fstab

</code></pre>

<p>目前已经设置了swap分区，并重启了mysql，后续观察一下看看还会不会出现吧。</p>

<p>参考：<a href="http://stackoverflow.com/questions/10284532/amazon-ec2-mysql-aborting-start-because-innodb-mmap-x-bytes-failed-errno-12">http://stackoverflow.com/questions/10284532/amazon-ec2-mysql-aborting-start-because-innodb-mmap-x-bytes-failed-errno-12</a></p>

<p>补充，经过近2个月观察，没再发生down掉的情况。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 下压缩与解压缩命令]]></title>
    <link href="http://golog.cc/compress-command-of-linux.html"/>
    <updated>2017-06-26T16:03:27+08:00</updated>
    <id>http://golog.cc/compress-command-of-linux.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">tar</h3>

<p>-c: 建立压缩档案<br/>
-x：解压<br/>
-t：查看内容<br/>
-r：向压缩归档文件末尾追加文件<br/>
-u：更新原压缩包中的文件</p>

<p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</p>

<span id="more"></span><!-- more -->

<p>-z：有gzip属性的<br/>
-j：有bz2属性的<br/>
-Z：有compress属性的<br/>
-v：显示所有过程<br/>
-O：将文件解开到标准输出</p>

<p>下面的参数-f是必须的</p>

<p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p>

<h3 id="toc_1">tar -cf all.tar *.jpg</h3>

<p>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p>

<h3 id="toc_2">tar -rf all.tar *.gif</h3>

<p>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p>

<h3 id="toc_3">tar -uf all.tar logo.gif</h3>

<p>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p>

<h3 id="toc_4">tar -tf all.tar</h3>

<p>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p>

<h3 id="toc_5">tar -xf all.tar</h3>

<p>这条命令是解出all.tar包中所有文件，-x是解开的意思</p>

<h3 id="toc_6">压缩</h3>

<p>tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg</p>

<p>tar –czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p>

<p>tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</p>

<p>tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p>

<p>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for Linux</p>

<p>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux</p>

<h3 id="toc_7">解压</h3>

<p>tar –xvf file.tar //解压 tar包</p>

<p>tar -xzvf file.tar.gz //解压tar.gz</p>

<p>tar -xjvf file.tar.bz2   //解压 tar.bz2</p>

<p>tar –xZvf file.tar.Z   //解压tar.Z</p>

<p>unrar e file.rar //解压rar<br/>
unzip file.zip //解压zip</p>

<p>总结<br/>
1、*.tar 用 tar –xvf 解压<br/>
2、*.gz 用 gzip -d或者gunzip 解压<br/>
3、*.tar.gz和*.tgz 用 tar –xzf 解压<br/>
4、*.bz2 用 bzip2 -d或者用bunzip2 解压<br/>
5、*.tar.bz2用tar –xjf 解压<br/>
6、*.Z 用 uncompress 解压<br/>
7、*.tar.Z 用tar –xZf 解压<br/>
8、*.rar 用 unrar e解压<br/>
9、*.zip 用 unzip 解压</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GO语言中的StructTag类型]]></title>
    <link href="http://golog.cc/structtag-of-go.html"/>
    <updated>2017-06-24T18:57:27+08:00</updated>
    <id>http://golog.cc/structtag-of-go.html</id>
    <content type="html"><![CDATA[
<p>StructTag是什么？在Go语言里，StructTag是一个标记字符串，此字符串可跟随在Struct中字段定义的后面。StructTag就是一系列的 key:”value” 形式的组合，其中key是一个不可为空的字符串，key-value组合可以有多个，空格分隔。</p>

<span id="more"></span><!-- more -->

<p>StructTag有什么用？！StructTag主要解决了不同类型数据集合间(Struct,Json,Table等)转换中键值Key定义不一样的问题。StructTag可以理解为一个不用数据类型键值Key的映射表Map, 在StructTag中可以定义不用数据集合键值和Struct中Key值的映射关系，这样方便了Struct数据转为其他类型数据的过程。例如我们可以把Struct数据映射成为一个Json格式的数据，或者把Struct数据映射成为一个数据表Table。当然我们也可以依据StructTag的定义，把一个Json数据转为一个Struct结构数据。</p>

<p>下面，我们可以看一下，Struct和Json数据间的互相转换的例子：</p>

<pre><code>package main  
import (  
  &quot;fmt&quot;
  &quot;encoding/json&quot;
)
type Person struct {  
  FirstName string `json:&quot;first_name&quot;` //FirstName &lt;=&gt; firest_name 
  LastName string `json:&quot;last_name&quot;` 
  MiddleName string `json:&quot;middle_name,omitempty&quot;` 
} 
func main() {  
  json_string := ` { &quot;first_name&quot;: &quot;John&quot;, &quot;last_name&quot;: &quot;Smith&quot; }`
  person := new(Person)
  json.Unmarshal([]byte(json_string), person) //将json数据转为Person Struct 
  fmt.Println(person) 
  new_json, _ := json.Marshal(person) //将Person Sturct 转为json格式   
  fmt.Printf(&quot;%s\n&quot;, new_json) 
} 

// *Output* 
// &amp;{John Smith } 
// {&quot;first_name&quot;:&quot;John&quot;,&quot;last_name&quot;:&quot;Smith&quot;}
</code></pre>

<p>从上面的代码可看出，结构体间的数据转换可以不用严格遵循一对一的转换，例如Person Struct 中定义的MiddleName，如果json数据定义中无此字段，可以在StructTag中加入”omitempty”, 标识该字段的数据可忽略。</p>

<p>注意：有时候在Struct转Json的时候，Struct里的key是大写首字母的，如果在转Json的时候，变小写字母，或者其他的名字，就可以用StructTag的方式。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用的Linux命令]]></title>
    <link href="http://golog.cc/linux-commandp-in-common-use.html"/>
    <updated>2017-06-24T15:12:23+08:00</updated>
    <id>http://golog.cc/linux-commandp-in-common-use.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">1. 查看文件大小</h3>

<p>查看当前文件夹下所有文件大小（包括子文件夹）</p>

<pre><code>du -sh
</code></pre>

<p>后面可以跟具体的文件夹名称</p>

<span id="more"></span><!-- more -->

<h3 id="toc_1">2. 查看磁盘空间大小命令</h3>

<p>df -h Df命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式： </p>

<pre><code>df -hl 

</code></pre>

<p>显示格式为： </p>

<pre><code>文件系统 容量 已用 可用 已用% 挂载
</code></pre>

<h3 id="toc_2">3. 清理Git占用的空间</h3>

<p>通过以下的命令，清空git占用的一些空间：</p>

<pre><code>git gc
</code></pre>

<p>该命令可以在任何位置上运行。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用的sublime插件集合 – sublime推荐必备插件]]></title>
    <link href="http://golog.cc/plugins-of-sublime.html"/>
    <updated>2017-06-23T17:02:03+08:00</updated>
    <id>http://golog.cc/plugins-of-sublime.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">1. Package Control</h3>

<p>功能：安装包管理</p>

<p>简介：sublime插件控制台，提供添加、删除、禁用、查找插件等功能</p>

<p>使用：<a href="https://sublime.wbond.net/installation">https://sublime.wbond.net/installation</a></p>

<span id="more"></span><!-- more -->

<p>安装方法：</p>

<ol>
<li><p>CTRL+` ，出现控制台</p></li>
<li><p>粘贴以下代码至控制台</p></li>
</ol>

<p>ST2：</p>

<pre><code>    
import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)

</code></pre>

<p>ST3：</p>

<pre><code>
import
urllib.request,os;
pf
=
&#39;Package
 Control.sublime-package&#39;;
ipp
=
sublime.installed_packages_path();
urllib.request.install_opener(
urllib.request.build_opener(
urllib.request.ProxyHandler())
);
open(os.path.join(ipp,
pf),
&#39;wb&#39;).write(urllib.request.urlopen(
&#39;http://sublime.wbond.net/&#39;
+
pf.replace(&#39;
 &#39;,&#39;%20&#39;)).read())
 
</code></pre>

<p>其他方法：</p>

<p>如果以上方法不能安装，请使用下面的方法</p>

<ol>
<li><p>选择菜单：Preferences &gt; Browse Packages</p></li>
<li><p>打开sublime插件安装包文件夹</p></li>
<li><p>下载文件并复制到打开的文件夹</p></li>
<li><p>重启sublime</p></li>
</ol>

<h3 id="toc_1">2. Emmet</h3>

<p>功能：编码快捷键，前端必备</p>

<p>简介：Emmet作为zen coding的升级版，对于前端来说，可是必备插件，如果你对它还不太熟悉，可以在其官网（<a href="http://docs.emmet.io/%EF%BC%89%E4%B8%8A%E7%9C%8B%E4%B8%8B%E5%85%B7%E4%BD%93%E7%9A%84%E6%BC%94%E7%A4%BA%E8%A7%86%E9%A2%91%E3%80%82">http://docs.emmet.io/）上看下具体的演示视频。</a></p>

<p>使用：教程-<a href="http://docs.emmet.io/cheat-sheet/">http://docs.emmet.io/cheat-sheet/</a>、<a href="http://peters-playground.com/Emmet-Css-Snippets-for-Sublime-Text-2/">http://peters-playground.com/Emmet-Css-Snippets-for-Sublime-Text-2/</a></p>

<p><img src="media/14982085236076/emmet.gif" alt="emmet"/></p>

<h3 id="toc_2">3. JSFormat</h3>

<p>功能：JavaScript的代码格式化插件</p>

<p>简介：很多网站的js代码都进行了压缩，一行式的甚至混淆压缩，这让我们看起来很吃力。而这个插件能帮我们把原始代码进行格式的整理，包括换行和缩进等等，是代码一目了然，更快读懂~</p>

<p>使用：在已压缩的JS文件中，右键选择jsFormat或者使用默认快捷键（Ctrl+Alt+F）</p>

<p><img src="media/14982085236076/jsFormat.gif" alt="jsFormat"/></p>

<h3 id="toc_3">4. LESS</h3>

<p>功能：LESS高亮插件</p>

<p>简介：用LESS的同学都知道，sublime没有支持less的语法高亮，所以这个插件可以帮上我们</p>

<p>使用：打开.less文件或者设置为less格式</p>

<p><img src="media/14982085236076/less.gif" alt="less"/></p>

<h3 id="toc_4">5. Less2CSS</h3>

<p>功能：编译Less</p>

<p>简介：监测到文件改动时，编译保存为.css文件</p>

<p>使用：打开.less文件，编写代码保存即可看到同时生成.css的文件，如果没有则需要安装node。不推荐用这种方法编译，要么用koala，要么就用grunt编译。</p>

<h3 id="toc_5">6. Alignment</h3>

<p>功能：”=”号对齐</p>

<p>简介：变量定义太多，长短不一，可一键对齐</p>

<p>使用：默认快捷键Ctrl+Alt+A和QQ截屏冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A；先选择要对齐的文本</p>

<p><img src="media/14982085236076/align.gif" alt="align"/></p>

<h3 id="toc_6">7. sublime-autoprefixer</h3>

<p>功能：CSS添加私有前缀</p>

<p>简介：CSS还未标准化，所以要给各大浏览器一个前缀以解决兼容问题</p>

<p>使用：Ctrl+Shift+P，选择autoprefixer即可。需要安装Node.js。</p>

<p>其他设置如快捷键请参考：<a href="https://sublime.wbond.net/packages/Autoprefixer">https://sublime.wbond.net/packages/Autoprefixer</a></p>

<p><img src="media/14982085236076/prefixer.gif" alt="prefixe"/></p>

<h3 id="toc_7">8. Clipboard History</h3>

<p>功能：粘贴板历史记录</p>

<p>简介：方便使用复制/剪切的内容</p>

<p>使用：</p>

<ul>
<li>Ctrl+alt+v：显示历史记录</li>
<li>Ctrl+alt+d：清空历史记录</li>
<li>Ctrl+shift+v：粘贴上一条记录（最旧）</li>
<li>Ctrl+shift+alt+v：粘贴下一条记录（最新）</li>
</ul>

<p><img src="media/14982085236076/keyboard.gif" alt="keyboard"/></p>

<h3 id="toc_8">9. Bracket Highlighter</h3>

<p>功能：代码匹配</p>

<p>简介：可匹配[], (), {}, “”, ”, <tag></tag>，高亮标记，便于查看起始和结束标记</p>

<p>使用：点击对应代码即可</p>

<p><img src="media/14982085236076/highlight.gif" alt="highlight"/></p>

<h3 id="toc_9">10. Git</h3>

<p>功能：Git管理</p>

<p>简介：插件基本上实现了git的所有功能</p>

<p>使用：<a href="https://github.com/kemayo/sublime-text-git/wiki">https://github.com/kemayo/sublime-text-git/wiki</a></p>

<p><img src="media/14982085236076/git.png" alt="git"/></p>

<h3 id="toc_10">11. jQuery</h3>

<p>功能：jQ函数提示</p>

<p>简介：快捷输入jQ函数，是偷懒的好方法</p>

<p><img src="media/14982085236076/jquery.gif" alt="jquery"/></p>

<h3 id="toc_11">12. Doc​Blockr</h3>

<p>功能：生成优美注释</p>

<p>简介：标准的注释，包括函数名、参数、返回值等，并以多行显示，手动写比较麻烦</p>

<p>使用：输入/<em>、/</em>*然后回车，还有很多用法，请参照</p>

<p><a href="https://sublime.wbond.net/packages/DocBlockr">https://sublime.wbond.net/packages/DocBlockr</a></p>

<p><img src="media/14982085236076/basic.gif" alt="basi"/></p>

<h3 id="toc_12">13. Color​Picker</h3>

<p>功能：调色板</p>

<p>简介：需要输入颜色时，可直接选取颜色</p>

<p>使用：快捷键Windows: ctrl+shift+c</p>

<p><img src="media/14982085236076/14982095581101.jpg" alt=""/></p>

<p><img src="media/14982085236076/14982095671586.jpg" alt=""/></p>

<h3 id="toc_13">14. ConvertToUTF8</h3>

<p>功能：文件转码成utf-8</p>

<p>简介：通过本插件，您可以编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的 GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。ConvertToUTF8 同时支持 Sublime Text 2 和 3。</p>

<p>使用：安装插件后自动转换为utf-8格式</p>

<p><img src="media/14982085236076/uy67y.gif" alt="uy67y"/></p>

<h3 id="toc_14">15. AutoFileName</h3>

<p>功能：快捷输入文件名</p>

<p>简介：自动完成文件名的输入，如图片选取</p>

<p>使用：输入”/”即可看到相对于本项目文件夹的其他文件</p>

<p><img src="media/14982085236076/autofilename.gif" alt="autofilename"/></p>

<h3 id="toc_15">16. Nodejs</h3>

<p>功能：node代码提示</p>

<p>教程：<a href="https://sublime.wbond.net/packages/Nodejs">https://sublime.wbond.net/packages/Nodejs</a></p>

<p><img src="media/14982085236076/14982095335507.jpg" alt=""/><br/>
ZCFcC</p>

<h3 id="toc_16">17. IMESupport</h3>

<p>功能：sublime中文输入法</p>

<p>简介：还在纠结 Sublime Text 中文输入法不能跟随光标吗？试试「IMESupport 」这个插件吧！目前只支持 Windows，在搜索等界面不能很好的跟随光标。</p>

<p>使用：Ctrl + Shift + P →输入pci →输入IMESupport →回车</p>

<p><img src="media/14982085236076/c1608aa0gw1e9dmrd3vxpg209y08d75x.gif" alt="c1608aa0gw1e9dmrd3vxpg209y08d75x"/></p>

<h3 id="toc_17">18. Trailing spaces</h3>

<p>功能：检测并一键去除代码中多余的空格</p>

<p>简介：还在纠结代码中有多余的空格而显得代码不规范？或是有处女座情节？次插件帮你实现发现多余空格、一键删除空格、保存时自动删除多余空格，让你的代码规范清爽起来</p>

<p>使用：安装插件并重启，即可自动提示多余空格。一键删除多余空格：CTRL+SHITF+T（需配置），更多配置请点击标题。快捷键配置：在Preferences / Key Bindings – User加上代码（数组内）</p>

<pre><code>
{
&quot;keys&quot;:
[&quot;ctrl+shift+t&quot;],
&quot;command&quot;:
&quot;delete_trailing_spaces&quot;
}

</code></pre>

<p><img src="media/14982085236076/spac.gif" alt="spa"/></p>

<h3 id="toc_18">19. FileDiffs</h3>

<p>功能：强大的比较代码不同工具</p>

<p>简介：比较当前文件与选中的代码、剪切板中代码、另一文件、未保存文件之间的差别。可配置为显示差别在外部比较工具，精确到行。</p>

<p>使用：右键标签页，出现FileDiffs Menu或者Diff with Tab…选择对应文件比较即可</p>

<p><img src="media/14982085236076/diff.gif" alt="diff"/></p>

<h3 id="toc_19">20. GBK Encoding Support</h3>

<p>功能：中文识别</p>

<p>简介：Sublime Text 2可识别UTF-8格式的中文，不识别GBK和ANSI，因此打开很多含中文的文档都会出现乱码。可以通过安装插件GBK Support,来识别GBK和ANSI。</p>

<p>使用：</p>

<ul>
<li>Open a GBK File</li>
<li>Save file with GBK encoding</li>
<li>Change file encoding from utf8 to GBK or GBK to utf8</li>
</ul>

<p><img src="media/14982085236076/14982094859392.jpg" alt=""/></p>

<p><img src="media/14982085236076/14982095005997.jpg" alt=""/></p>

<h3 id="toc_20">21. 增强侧边栏</h3>

<p>SideBarEnhancements插件有效地改进了Sublime Text的侧边栏。安装插件后在侧边栏上点击右键，可以找到一下新功能：在资源管理器中打开、新建文件、新建文件夹、以…打开、在浏览器中打开。</p>

<p><img src="media/14982085236076/14982109732383.jpg" alt=""/></p>

<p>注：在浏览器中打开的热键是F12。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go语言的字符串拼装方式性能对比]]></title>
    <link href="http://golog.cc/comparison-of-different-ways-to-join-strings.html"/>
    <updated>2017-06-21T00:47:38+08:00</updated>
    <id>http://golog.cc/comparison-of-different-ways-to-join-strings.html</id>
    <content type="html"><![CDATA[
<p>Go语言中字符串的拼装方法很多，那么问题来了，到底哪家性能好？</p>

<p>下面代码，分别比较了 fmt.Sprintf，string +，strings.Join，bytes.Buffer，方法是循环若干次比较总时间。</p>

<p>在VMWare下的Ubuntu 14.04下运行的结果表明：</p>

<ul>
<li>fmt.Sprintf 和 strings.Join 速度相当</li>
<li>string + 比上述二者快一倍</li>
<li>bytes.Buffer又比上者快约400-500倍</li>
</ul>

<span id="more"></span><!-- more -->

<p>如果循环内每次都临时声明一个bytes.Buffer来使用，会比持续存在慢50%，但是仍然很快</p>

<p>测试代码如下：</p>

<pre><code>
package main

import (
    &quot;bytes&quot;
    &quot;fmt&quot;
    &quot;strings&quot;
    &quot;time&quot;
)

func benchmarkStringFunction(n int, index int) (d time.Duration) {
    v := &quot;ni shuo wo shi bu shi tai wu liao le a?&quot;
    var s string
    var buf bytes.Buffer

    t0 := time.Now()
    for i := 0; i &lt; n; i++ {
        switch index {
        case 0: // fmt.Sprintf
            s = fmt.Sprintf(&quot;%s[%s]&quot;, s, v)
        case 1: // string +
            s = s + &quot;[&quot; + v + &quot;]&quot;
        case 2: // strings.Join
            s = strings.Join([]string{s, &quot;[&quot;, v, &quot;]&quot;}, &quot;&quot;)
        case 3: // temporary bytes.Buffer
            b := bytes.Buffer{}
            b.WriteString(&quot;[&quot;)
            b.WriteString(v)
            b.WriteString(&quot;]&quot;)
            s = b.String()
        case 4: // stable bytes.Buffer
            buf.WriteString(&quot;[&quot;)
            buf.WriteString(v)
            buf.WriteString(&quot;]&quot;)
        }

        if i == n-1 {
            if index == 4 { // for stable bytes.Buffer
                s = buf.String()
            }
            fmt.Println(len(s)) // consume s to avoid compiler optimization
        }
    }
    t1 := time.Now()
    d = t1.Sub(t0)
    fmt.Printf(&quot;time of way(%d)=%v\n&quot;, index, d)
    return d
}

func main() {
    k := 5
    d := [5]time.Duration{}
    for i := 0; i &lt; k; i++ {
        d[i] = benchmarkStringFunction(10000, i)
    }

    for i := 0; i &lt; k-1; i++ {
        fmt.Printf(&quot;way %d is %6.1f times of way %d\n&quot;, i, float32(d[i])/float32(d[k-1]), k-1)
    }
}

</code></pre>

<p>其中一次的结果如下：</p>

<pre><code>
etworker@ubuntu:~/work/go/test$ go run testBenchmark.go 
410000
time of way(0)=1.199641573s
410000
time of way(1)=568.716669ms
410000
time of way(2)=1.197077483s
41
time of way(3)=2.277063ms
410000
time of way(4)=1.398864ms
way 0 is  857.6 times of way 4
way 1 is  406.6 times of way 4
way 2 is  855.7 times of way 4
way 3 is    1.6 times of way 4

</code></pre>

<p>经测试，连接100万个字符串，使用buffer消耗的时间约为77毫秒，使用+=消耗的时间为.....抱歉，等了5分钟结果没跑出来，减小数量级后，连接10万字符串的时间为3312毫秒</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GO语言重量级WEB框架BEEGO]]></title>
    <link href="http://golog.cc/beego-web-framework-of-golang.html"/>
    <updated>2017-06-16T23:09:29+08:00</updated>
    <id>http://golog.cc/beego-web-framework-of-golang.html</id>
    <content type="html"><![CDATA[
<p>BEEGO作为GO语言的重量级框架，被很多人用在了各自的项目当中。可以在Beego的官方网站（<a href="http://beego.me">Beego</a>）上查看应用案例，不少是大型的企业，以及大型的项目。</p>

<span id="more"></span><!-- more -->

<p>从这篇开始，在使用Beego这个框架做项目的时候，陆续的记录一些笔记，供大家（也包括自己）参考使用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下执行git命令出现xcrun： error： invalid active developer path错误的处理方法]]></title>
    <link href="http://golog.cc/mac-xcrun-error-fixed.html"/>
    <updated>2017-06-16T22:48:46+08:00</updated>
    <id>http://golog.cc/mac-xcrun-error-fixed.html</id>
    <content type="html"><![CDATA[
<p>在Mac下，执行git命令时候出现如下的错误：</p>

<pre><code>
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun

</code></pre>

<span id="more"></span><!-- more -->

<p>解决方法：</p>

<p>打开终端输入</p>

<p>xcode-select --install</p>

<p>回车后，系统弹出下载xcode，点击确认，下载完成后即可。</p>

<p>猜测可能是跟xcode卸载或者升级有些关系，一些插件或组件被破坏了，重新安装下就好。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Git的钩子实现自动部署]]></title>
    <link href="http://golog.cc/auto-deploy-with-git-hook.html"/>
    <updated>2016-10-08T16:04:47+08:00</updated>
    <id>http://golog.cc/auto-deploy-with-git-hook.html</id>
    <content type="html"><![CDATA[
<ol>
<li>通过服务器系统自带git或者其他的方式，例如gogs，搭建git仓库。这里要注意，搭建git仓库时，要创建一个git用户。对于客户端而言，服务器是远端；对于服务器本机而言，就是本机。</li>
</ol>

<span id="more"></span><!-- more -->

<ol>
<li><p>在git仓库里，创建一个仓库，用于客户端上传文件使用。通过类似gitlab或者gogs之类工具，这里创建的仓库是在指定的位置。</p>

<p>这一步的操作是在服务器上，记住路径，例如/var/git/testRep。</p></li>
<li><p>进入服务器上的部署文件夹，假如是/var/testDeploy,</p>

<p>在该目录下，运行：</p>

<pre><code>
git clone /var/git/testRep /var/testDeploy

</code></pre>

<p>相当于初始化本地一个库，后续就可以通过git pull来更新文件了</p>

<blockquote>
<p>注意：删除已有的文件夹中的文件、删除.git文件夹之后，要切换到git用户之下，使用git用户重新git clone一遍，才可以自动的进行部署，因为部署需要用git用户进行操作，在root做所有的操作，git就没办法把更新的文件部署到发布的目录下面。</p>
</blockquote></li>
<li><p>在服务器上的仓库/var/git/testRep.git/下面，找到hook文件夹，找到其中的post-receive文件，这个是响应在post的钩子文件，运行这个文件定义的脚本，对这个文件脚本进行编写：</p>

<pre><code>
unset GIT_DIR
DeployDir=/var/testDeploy/
cd $DeployDir
git add . -A &amp;&amp; git stash
git pull origin master

</code></pre>

<p>实现把文件pull部署文件夹，从而实现自动部署。</p>

<p>以上方法步骤，验证通过。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下切换用户的命令]]></title>
    <link href="http://golog.cc/change-user-os.html"/>
    <updated>2016-10-08T00:07:00+08:00</updated>
    <id>http://golog.cc/change-user-os.html</id>
    <content type="html"><![CDATA[
<ol>
<li>增加用户，在root下：</li>
</ol>

<pre><code>
add user git

</code></pre>

<p>表示增加git用户。</p>

<ol>
<li>切换用户</li>
</ol>

<pre><code>
su git

</code></pre>

<p>切换成git用户。</p>

<p>从root用户切换到其他用户不需要密码，从其他用户切换到root用户，需要输入密码。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何升级CentOS 6.5下的MySQL]]></title>
    <link href="http://golog.cc/how-to-update-mysql-in-centos.html"/>
    <updated>2016-10-07T22:05:57+08:00</updated>
    <id>http://golog.cc/how-to-update-mysql-in-centos.html</id>
    <content type="html"><![CDATA[
<ul>
<li>1. 备份数据库，升级MySQL通常不会丢失数据，但保险起见，我们需要做这一步。输入命令：</li>
</ul>

<pre><code>
mysqldump -u xxx -h xxx -P 3306 -p --all-databases &gt; databases.sql

</code></pre>

<span id="more"></span><!-- more -->

<ul>
<li>2. 停止MySQL服务，输入命令：</li>
</ul>

<pre><code>
service mysqld stop

</code></pre>

<ul>
<li>3. 卸载旧版MySQL，输入命令：</li>
</ul>

<pre><code>
yum remove mysql mysql-*

</code></pre>

<ul>
<li>4. 移除命令执行后，可再看看是否有残余的mysql，输入命令：</li>
</ul>

<pre><code>
yum list installed | grep mysql

</code></pre>

<p>如果有，可输入命令删除：</p>

<pre><code>
rum remove mysql－libs

</code></pre>

<ul>
<li>5. 下载安装最新的rpm文件</li>
</ul>

<pre><code>
rpm -Uvh http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm

</code></pre>

<ul>
<li>6. 安装MySQL，输入命令：</li>
</ul>

<pre><code>
yum install mysql-community-server

</code></pre>

<ul>
<li>7. 安装完成后，输入命令查看MySQL版本号：</li>
</ul>

<pre><code>
mysql -V

</code></pre>

<ul>
<li>8. 启动MySQL，输入命令：</li>
</ul>

<pre><code>
service mysqld start

</code></pre>

<p>在经过上面的方法升级之后，Mysql启动时，可能会报错，复发启动，查看/var/log/mysqld.log发现：</p>

<pre><code>
[ERROR] InnoDB: auto-extending data file ./ibdata1 is of a different size 640 pages (rounded down to MB) than specified in the .cnf file: initial 768 pages, max 0 (relevant if non-zero) pages!

</code></pre>

<p>可以采用下面的方法来处理：</p>

<pre><code>
rm -rf /var/lib/mysql/ib*

</code></pre>

<p>删除ibdata1、ib_logfile0、ib_logfile1等文件，再重启Mysql即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS下Mysql无法启动，提示“Another MySQL daemon already running”]]></title>
    <link href="http://golog.cc/centos-Another-MySQL-daemon-already-running.html"/>
    <updated>2016-10-07T21:04:41+08:00</updated>
    <id>http://golog.cc/centos-Another-MySQL-daemon-already-running.html</id>
    <content type="html"><![CDATA[
<p>有些情况下，CentOS下的Mysql启动不了，采用:</p>

<pre><code>
service mysqld restart

service mysqld start

</code></pre>

<p>都解决不了，会提示：</p>

<pre><code>
Another MySQL daemon already running with the same unix socket.

</code></pre>

<span id="more"></span><!-- more -->

<p>目前，具体造成该问题的原因，暂且不知，但可以采取以下的方法，解决这个问题：</p>

<ol>
<li><p>重启服务器</p></li>
<li><p>采用如下的命令：</p></li>
</ol>

<pre><code>
# mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak

# service mysqld start

</code></pre>

<p>相当于删除mysql.sock，重新启动mysql服务，重新生成一个有效的mysql.sock，问题就可以解决。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThinkGo类ThinkPHP的Go语言WEB开发框架]]></title>
    <link href="http://golog.cc/thinkgo-web-frame-project.html"/>
    <updated>2016-10-07T19:02:19+08:00</updated>
    <id>http://golog.cc/thinkgo-web-frame-project.html</id>
    <content type="html"><![CDATA[
<p>ThinkGo 是一款 Go 语言编写的 web 快速开发框架。</p>

<p>它基于开源框架 Gin 进行二次开发，旨在实现一种类 ThinkPHP 的高可用、高效率的 web 框架。</p>

<p>它最显著的特点是模块、控制器、操作三段式的标准 MVC 架构，且模块与插件的目录结构完全一致，令开发变得非常简单灵活。</p>

<span id="more"></span><!-- more -->

<p>该项目Github链接：<a href="https://github.com/henrylee2cn/thinkgo">https://github.com/henrylee2cn/thinkgo</a></p>

]]></content>
  </entry>
  
</feed>
